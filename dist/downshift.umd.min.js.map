{"version":3,"file":"downshift.umd.min.js","sources":["../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/@babel/runtime/helpers/esm/extends.js","../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js","../node_modules/react-is/cjs/react-is.production.min.js","../node_modules/react-is/index.js","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js","../node_modules/prop-types/index.js","../node_modules/compute-scroll-into-view/dist/index.mjs","../src/utils.js","../src/set-a11y-status.js","../src/stateChangeTypes.js","../src/downshift.js","../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../src/hooks/utils.js","../src/hooks/useSelect/utils.js","../src/hooks/useSelect/stateChangeTypes.js","../src/hooks/useSelect/reducer.js","../src/hooks/useSelect/index.js","../src/hooks/useCombobox/stateChangeTypes.js","../src/hooks/useCombobox/utils.js","../src/hooks/useCombobox/reducer.js","../src/hooks/useCombobox/index.js","../src/hooks/useMultipleSelection/utils.js","../src/hooks/useMultipleSelection/stateChangeTypes.js","../src/hooks/useMultipleSelection/reducer.js","../src/hooks/useMultipleSelection/index.js"],"sourcesContent":["export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}","export default function _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}","export default function _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}","/** @license React v16.13.1\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';var b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?\nSymbol.for(\"react.suspense_list\"):60120,r=b?Symbol.for(\"react.memo\"):60115,t=b?Symbol.for(\"react.lazy\"):60116,v=b?Symbol.for(\"react.block\"):60121,w=b?Symbol.for(\"react.fundamental\"):60117,x=b?Symbol.for(\"react.responder\"):60118,y=b?Symbol.for(\"react.scope\"):60119;\nfunction z(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;\nexports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};\nexports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};\nexports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||\"object\"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","function t(t){return\"object\"==typeof t&&null!=t&&1===t.nodeType}function e(t,e){return(!e||\"hidden\"!==t)&&\"visible\"!==t&&\"clip\"!==t}function n(t,n){if(t.clientHeight<t.scrollHeight||t.clientWidth<t.scrollWidth){var r=getComputedStyle(t,null);return e(r.overflowY,n)||e(r.overflowX,n)||function(t){var e=function(t){if(!t.ownerDocument||!t.ownerDocument.defaultView)return null;try{return t.ownerDocument.defaultView.frameElement}catch(t){return null}}(t);return!!e&&(e.clientHeight<t.scrollHeight||e.clientWidth<t.scrollWidth)}(t)}return!1}function r(t,e,n,r,i,o,l,d){return o<t&&l>e||o>t&&l<e?0:o<=t&&d<=n||l>=e&&d>=n?o-t-r:l>e&&d<n||o<t&&d>n?l-e+i:0}var i=function(e,i){var o=window,l=i.scrollMode,d=i.block,f=i.inline,h=i.boundary,u=i.skipOverflowHiddenElements,s=\"function\"==typeof h?h:function(t){return t!==h};if(!t(e))throw new TypeError(\"Invalid target\");for(var a,c,g=document.scrollingElement||document.documentElement,p=[],m=e;t(m)&&s(m);){if((m=null==(c=(a=m).parentElement)?a.getRootNode().host||null:c)===g){p.push(m);break}null!=m&&m===document.body&&n(m)&&!n(document.documentElement)||null!=m&&n(m,u)&&p.push(m)}for(var w=o.visualViewport?o.visualViewport.width:innerWidth,v=o.visualViewport?o.visualViewport.height:innerHeight,W=window.scrollX||pageXOffset,H=window.scrollY||pageYOffset,b=e.getBoundingClientRect(),y=b.height,E=b.width,M=b.top,V=b.right,x=b.bottom,I=b.left,C=\"start\"===d||\"nearest\"===d?M:\"end\"===d?x:M+y/2,R=\"center\"===f?I+E/2:\"end\"===f?V:I,T=[],k=0;k<p.length;k++){var B=p[k],D=B.getBoundingClientRect(),O=D.height,X=D.width,Y=D.top,L=D.right,S=D.bottom,j=D.left;if(\"if-needed\"===l&&M>=0&&I>=0&&x<=v&&V<=w&&M>=Y&&x<=S&&I>=j&&V<=L)return T;var N=getComputedStyle(B),q=parseInt(N.borderLeftWidth,10),z=parseInt(N.borderTopWidth,10),A=parseInt(N.borderRightWidth,10),F=parseInt(N.borderBottomWidth,10),G=0,J=0,K=\"offsetWidth\"in B?B.offsetWidth-B.clientWidth-q-A:0,P=\"offsetHeight\"in B?B.offsetHeight-B.clientHeight-z-F:0,Q=\"offsetWidth\"in B?0===B.offsetWidth?0:X/B.offsetWidth:0,U=\"offsetHeight\"in B?0===B.offsetHeight?0:O/B.offsetHeight:0;if(g===B)G=\"start\"===d?C:\"end\"===d?C-v:\"nearest\"===d?r(H,H+v,v,z,F,H+C,H+C+y,y):C-v/2,J=\"start\"===f?R:\"center\"===f?R-w/2:\"end\"===f?R-w:r(W,W+w,w,q,A,W+R,W+R+E,E),G=Math.max(0,G+H),J=Math.max(0,J+W);else{G=\"start\"===d?C-Y-z:\"end\"===d?C-S+F+P:\"nearest\"===d?r(Y,S,O,z,F+P,C,C+y,y):C-(Y+O/2)+P/2,J=\"start\"===f?R-j-q:\"center\"===f?R-(j+X/2)+K/2:\"end\"===f?R-L+A+K:r(j,L,X,q,A+K,R,R+E,E);var Z=B.scrollLeft,$=B.scrollTop;C+=$-(G=Math.max(0,Math.min($+G/U,B.scrollHeight-O/U+P))),R+=Z-(J=Math.max(0,Math.min(Z+J/Q,B.scrollWidth-X/Q+K)))}T.push({el:B,top:G,left:J})}return T};export{i as default};\n//# sourceMappingURL=index.mjs.map\n","import computeScrollIntoView from 'compute-scroll-into-view'\nimport {isPreact} from './is.macro'\n\nlet idCounter = 0\n\n/**\n * Accepts a parameter and returns it if it's a function\n * or a noop function if it's not. This allows us to\n * accept a callback, but not worry about it if it's not\n * passed.\n * @param {Function} cb the callback\n * @return {Function} a function\n */\nfunction cbToCb(cb) {\n  return typeof cb === 'function' ? cb : noop\n}\n\nfunction noop() {}\n\n/**\n * Scroll node into view if necessary\n * @param {HTMLElement} node the element that should scroll into view\n * @param {HTMLElement} menuNode the menu element of the component\n */\nfunction scrollIntoView(node, menuNode) {\n  if (!node) {\n    return\n  }\n\n  const actions = computeScrollIntoView(node, {\n    boundary: menuNode,\n    block: 'nearest',\n    scrollMode: 'if-needed',\n  })\n  actions.forEach(({el, top, left}) => {\n    el.scrollTop = top\n    el.scrollLeft = left\n  })\n}\n\n/**\n * @param {HTMLElement} parent the parent node\n * @param {HTMLElement} child the child node\n * @return {Boolean} whether the parent is the child or the child is in the parent\n */\nfunction isOrContainsNode(parent, child) {\n  return parent === child || (parent.contains && parent.contains(child))\n}\n\n/**\n * Simple debounce implementation. Will call the given\n * function once after the time given has passed since\n * it was last called.\n * @param {Function} fn the function to call after the time\n * @param {Number} time the time to wait\n * @return {Function} the debounced function\n */\nfunction debounce(fn, time) {\n  let timeoutId\n\n  function cancel() {\n    if (timeoutId) {\n      clearTimeout(timeoutId)\n    }\n  }\n\n  function wrapper(...args) {\n    cancel()\n    timeoutId = setTimeout(() => {\n      timeoutId = null\n      fn(...args)\n    }, time)\n  }\n\n  wrapper.cancel = cancel\n\n  return wrapper\n}\n\n/**\n * This is intended to be used to compose event handlers.\n * They are executed in order until one of them sets\n * `event.preventDownshiftDefault = true`.\n * @param {...Function} fns the event handler functions\n * @return {Function} the event handler to add to an element\n */\nfunction callAllEventHandlers(...fns) {\n  return (event, ...args) =>\n    fns.some(fn => {\n      if (fn) {\n        fn(event, ...args)\n      }\n      return (\n        event.preventDownshiftDefault ||\n        (event.hasOwnProperty('nativeEvent') &&\n          event.nativeEvent.preventDownshiftDefault)\n      )\n    })\n}\n\nfunction handleRefs(...refs) {\n  return node => {\n    refs.forEach(ref => {\n      if (typeof ref === 'function') {\n        ref(node)\n      } else if (ref) {\n        ref.current = node\n      }\n    })\n  }\n}\n\n/**\n * This generates a unique ID for an instance of Downshift\n * @return {String} the unique ID\n */\nfunction generateId() {\n  return String(idCounter++)\n}\n\n/**\n * This is only used in tests\n * @param {Number} num the number to set the idCounter to\n */\nfunction setIdCounter(num) {\n  idCounter = num\n}\n\n/**\n * Resets idCounter to 0. Used for SSR.\n */\nfunction resetIdCounter() {\n  idCounter = 0\n}\n\n/**\n * Default implementation for status message. Only added when menu is open.\n * Will specift if there are results in the list, and if so, how many,\n * and what keys are relevant.\n *\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */\nfunction getA11yStatusMessage({isOpen, resultCount, previousResultCount}) {\n  if (!isOpen) {\n    return ''\n  }\n\n  if (!resultCount) {\n    return 'No results are available.'\n  }\n\n  if (resultCount !== previousResultCount) {\n    return `${resultCount} result${\n      resultCount === 1 ? ' is' : 's are'\n    } available, use up and down arrow keys to navigate. Press Enter key to select.`\n  }\n\n  return ''\n}\n\n/**\n * Takes an argument and if it's an array, returns the first item in the array\n * otherwise returns the argument\n * @param {*} arg the maybe-array\n * @param {*} defaultValue the value if arg is falsey not defined\n * @return {*} the arg or it's first item\n */\nfunction unwrapArray(arg, defaultValue) {\n  arg = Array.isArray(arg) ? /* istanbul ignore next (preact) */ arg[0] : arg\n  if (!arg && defaultValue) {\n    return defaultValue\n  } else {\n    return arg\n  }\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Boolean} whether it's a DOM element\n */\nfunction isDOMElement(element) {\n  /* istanbul ignore if */\n  if (isPreact) {\n    // then this is preact or preact X\n    return (\n      typeof element.type === 'string' || typeof element.nodeName === 'string'\n    )\n  }\n\n  // then we assume this is react\n  return typeof element.type === 'string'\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Object} the props\n */\nfunction getElementProps(element) {\n  // props for react, attributes for preact\n\n  /* istanbul ignore if */\n  if (isPreact) {\n    return element.props || element.attributes\n  }\n\n  return element.props\n}\n\n/**\n * Throws a helpful error message for required properties. Useful\n * to be used as a default in destructuring or object params.\n * @param {String} fnName the function name\n * @param {String} propName the prop name\n */\nfunction requiredProp(fnName, propName) {\n  // eslint-disable-next-line no-console\n  console.error(`The property \"${propName}\" is required in \"${fnName}\"`)\n}\n\nconst stateKeys = [\n  'highlightedIndex',\n  'inputValue',\n  'isOpen',\n  'selectedItem',\n  'type',\n]\n/**\n * @param {Object} state the state object\n * @return {Object} state that is relevant to downshift\n */\nfunction pickState(state = {}) {\n  const result = {}\n  stateKeys.forEach(k => {\n    if (state.hasOwnProperty(k)) {\n      result[k] = state[k]\n    }\n  })\n  return result\n}\n\n/**\n * This will perform a shallow merge of the given state object\n * with the state coming from props\n * (for the controlled component scenario)\n * This is used in state updater functions so they're referencing\n * the right state regardless of where it comes from.\n *\n * @param {Object} state The state of the component/hook.\n * @param {Object} props The props that may contain controlled values.\n * @returns {Object} The merged controlled state.\n */\nfunction getState(state, props) {\n  return Object.keys(state).reduce((prevState, key) => {\n    prevState[key] = isControlledProp(props, key) ? props[key] : state[key]\n\n    return prevState\n  }, {})\n}\n\n/**\n * This determines whether a prop is a \"controlled prop\" meaning it is\n * state which is controlled by the outside of this component rather\n * than within this component.\n *\n * @param {Object} props The props that may contain controlled values.\n * @param {String} key the key to check\n * @return {Boolean} whether it is a controlled controlled prop\n */\nfunction isControlledProp(props, key) {\n  return props[key] !== undefined\n}\n\n/**\n * Normalizes the 'key' property of a KeyboardEvent in IE/Edge\n * @param {Object} event a keyboardEvent object\n * @return {String} keyboard key\n */\nfunction normalizeArrowKey(event) {\n  const {key, keyCode} = event\n  /* istanbul ignore next (ie) */\n  if (keyCode >= 37 && keyCode <= 40 && key.indexOf('Arrow') !== 0) {\n    return `Arrow${key}`\n  }\n  return key\n}\n\n/**\n * Simple check if the value passed is object literal\n * @param {*} obj any things\n * @return {Boolean} whether it's object literal\n */\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]'\n}\n\n/**\n * Returns the new index in the list, in a circular way. If next value is out of bonds from the total,\n * it will wrap to either 0 or itemCount - 1.\n *\n * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.\n * @param {number} baseIndex The initial position to move from.\n * @param {number} itemCount The total number of items.\n * @param {Function} getItemNodeFromIndex Used to check if item is disabled.\n * @param {boolean} circular Specify if navigation is circular. Default is true.\n * @returns {number} The new index after the move.\n */\nfunction getNextWrappingIndex(\n  moveAmount,\n  baseIndex,\n  itemCount,\n  getItemNodeFromIndex,\n  circular = true,\n) {\n  if (itemCount === 0) {\n    return -1\n  }\n\n  const itemsLastIndex = itemCount - 1\n\n  if (\n    typeof baseIndex !== 'number' ||\n    baseIndex < 0 ||\n    baseIndex >= itemCount\n  ) {\n    baseIndex = moveAmount > 0 ? -1 : itemsLastIndex + 1\n  }\n\n  let newIndex = baseIndex + moveAmount\n\n  if (newIndex < 0) {\n    newIndex = circular ? itemsLastIndex : 0\n  } else if (newIndex > itemsLastIndex) {\n    newIndex = circular ? 0 : itemsLastIndex\n  }\n\n  const nonDisabledNewIndex = getNextNonDisabledIndex(\n    moveAmount,\n    newIndex,\n    itemCount,\n    getItemNodeFromIndex,\n    circular,\n  )\n\n  return nonDisabledNewIndex === -1 ? baseIndex : nonDisabledNewIndex\n}\n\n/**\n * Returns the next index in the list of an item that is not disabled.\n *\n * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.\n * @param {number} baseIndex The initial position to move from.\n * @param {number} itemCount The total number of items.\n * @param {Function} getItemNodeFromIndex Used to check if item is disabled.\n * @param {boolean} circular Specify if navigation is circular. Default is true.\n * @returns {number} The new index. Returns baseIndex if item is not disabled. Returns next non-disabled item otherwise. If no non-disabled found it will return -1.\n */\nfunction getNextNonDisabledIndex(\n  moveAmount,\n  baseIndex,\n  itemCount,\n  getItemNodeFromIndex,\n  circular,\n) {\n  const currentElementNode = getItemNodeFromIndex(baseIndex)\n  if (!currentElementNode || !currentElementNode.hasAttribute('disabled')) {\n    return baseIndex\n  }\n\n  if (moveAmount > 0) {\n    for (let index = baseIndex + 1; index < itemCount; index++) {\n      if (!getItemNodeFromIndex(index).hasAttribute('disabled')) {\n        return index\n      }\n    }\n  } else {\n    for (let index = baseIndex - 1; index >= 0; index--) {\n      if (!getItemNodeFromIndex(index).hasAttribute('disabled')) {\n        return index\n      }\n    }\n  }\n\n  if (circular) {\n    return moveAmount > 0\n      ? getNextNonDisabledIndex(1, 0, itemCount, getItemNodeFromIndex, false)\n      : getNextNonDisabledIndex(\n          -1,\n          itemCount - 1,\n          itemCount,\n          getItemNodeFromIndex,\n          false,\n        )\n  }\n\n  return -1\n}\n\n/**\n * Checks if event target is within the downshift elements.\n *\n * @param {EventTarget} target Target to check.\n * @param {HTMLElement[]} downshiftElements The elements that form downshift (list, toggle button etc).\n * @param {Document} document The document.\n * @param {boolean} checkActiveElement Whether to also check activeElement.\n *\n * @returns {boolean} Whether or not the target is within downshift elements.\n */\nfunction targetWithinDownshift(\n  target,\n  downshiftElements,\n  document,\n  checkActiveElement = true,\n) {\n  return downshiftElements.some(\n    contextNode =>\n      contextNode &&\n      (isOrContainsNode(contextNode, target) ||\n        (checkActiveElement &&\n          isOrContainsNode(contextNode, document.activeElement))),\n  )\n}\n\nexport function validateControlledUnchanged(state, prevProps, nextProps) {\n  if (process.env.NODE_ENV === 'production') {\n    return\n  }\n\n  const warningDescription = `This prop should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Downshift element for the lifetime of the component. More info: https://github.com/downshift-js/downshift#control-props`\n\n  Object.keys(state).forEach(propKey => {\n    if (prevProps[propKey] !== undefined && nextProps[propKey] === undefined) {\n      // eslint-disable-next-line no-console\n      console.error(\n        `downshift: A component has changed the controlled prop \"${propKey}\" to be uncontrolled. ${warningDescription}`,\n      )\n    } else if (\n      prevProps[propKey] === undefined &&\n      nextProps[propKey] !== undefined\n    ) {\n      // eslint-disable-next-line no-console\n      console.error(\n        `downshift: A component has changed the uncontrolled prop \"${propKey}\" to be controlled. ${warningDescription}`,\n      )\n    }\n  })\n}\n\nexport {\n  cbToCb,\n  callAllEventHandlers,\n  handleRefs,\n  debounce,\n  scrollIntoView,\n  generateId,\n  getA11yStatusMessage,\n  unwrapArray,\n  isDOMElement,\n  getElementProps,\n  noop,\n  requiredProp,\n  setIdCounter,\n  resetIdCounter,\n  pickState,\n  isPlainObject,\n  normalizeArrowKey,\n  getNextWrappingIndex,\n  getNextNonDisabledIndex,\n  targetWithinDownshift,\n  getState,\n  isControlledProp,\n}\n","import {debounce} from './utils'\n\nconst cleanupStatus = debounce(() => {\n  getStatusDiv().textContent = ''\n}, 500)\n\n/**\n * @param {String} status the status message\n * @param {Object} documentProp document passed by the user.\n */\nfunction setStatus(status, documentProp) {\n  const div = getStatusDiv(documentProp)\n  if (!status) {\n    return\n  }\n\n  div.textContent = status\n  cleanupStatus()\n}\n\n/**\n * Get the status node or create it if it does not already exist.\n * @param {Object} documentProp document passed by the user.\n * @return {HTMLElement} the status node.\n */\nfunction getStatusDiv(documentProp = document) {\n  let statusDiv = documentProp.getElementById('a11y-status-message')\n  if (statusDiv) {\n    return statusDiv\n  }\n\n  statusDiv = documentProp.createElement('div')\n  statusDiv.setAttribute('id', 'a11y-status-message')\n  statusDiv.setAttribute('role', 'status')\n  statusDiv.setAttribute('aria-live', 'polite')\n  statusDiv.setAttribute('aria-relevant', 'additions text')\n  Object.assign(statusDiv.style, {\n    border: '0',\n    clip: 'rect(0 0 0 0)',\n    height: '1px',\n    margin: '-1px',\n    overflow: 'hidden',\n    padding: '0',\n    position: 'absolute',\n    width: '1px',\n  })\n  documentProp.body.appendChild(statusDiv)\n  return statusDiv\n}\n\nexport default setStatus\n","import productionEnum from './productionEnum.macro'\n\nexport const unknown = productionEnum('__autocomplete_unknown__')\nexport const mouseUp = productionEnum('__autocomplete_mouseup__')\nexport const itemMouseEnter = productionEnum('__autocomplete_item_mouseenter__')\nexport const keyDownArrowUp = productionEnum(\n  '__autocomplete_keydown_arrow_up__',\n)\nexport const keyDownArrowDown = productionEnum(\n  '__autocomplete_keydown_arrow_down__',\n)\nexport const keyDownEscape = productionEnum('__autocomplete_keydown_escape__')\nexport const keyDownEnter = productionEnum('__autocomplete_keydown_enter__')\nexport const keyDownHome = productionEnum('__autocomplete_keydown_home__')\nexport const keyDownEnd = productionEnum('__autocomplete_keydown_end__')\nexport const clickItem = productionEnum('__autocomplete_click_item__')\nexport const blurInput = productionEnum('__autocomplete_blur_input__')\nexport const changeInput = productionEnum('__autocomplete_change_input__')\nexport const keyDownSpaceButton = productionEnum(\n  '__autocomplete_keydown_space_button__',\n)\nexport const clickButton = productionEnum('__autocomplete_click_button__')\nexport const blurButton = productionEnum('__autocomplete_blur_button__')\nexport const controlledPropUpdatedSelectedItem = productionEnum(\n  '__autocomplete_controlled_prop_updated_selected_item__',\n)\nexport const touchEnd = productionEnum('__autocomplete_touchend__')\n","/* eslint camelcase:0 */\n\nimport PropTypes from 'prop-types'\nimport {Component, cloneElement} from 'react'\nimport {isForwardRef} from 'react-is'\nimport {isPreact, isReactNative} from './is.macro'\nimport setA11yStatus from './set-a11y-status'\nimport * as stateChangeTypes from './stateChangeTypes'\nimport {\n  handleRefs,\n  callAllEventHandlers,\n  cbToCb,\n  debounce,\n  generateId,\n  getA11yStatusMessage,\n  getElementProps,\n  isDOMElement,\n  targetWithinDownshift,\n  isPlainObject,\n  noop,\n  normalizeArrowKey,\n  pickState,\n  requiredProp,\n  scrollIntoView,\n  unwrapArray,\n  getNextWrappingIndex,\n  getNextNonDisabledIndex,\n  getState,\n  isControlledProp,\n  validateControlledUnchanged\n} from './utils'\n\nclass Downshift extends Component {\n  static propTypes = {\n    children: PropTypes.func,\n    defaultHighlightedIndex: PropTypes.number,\n    defaultIsOpen: PropTypes.bool,\n    initialHighlightedIndex: PropTypes.number,\n    initialSelectedItem: PropTypes.any,\n    initialInputValue: PropTypes.string,\n    initialIsOpen: PropTypes.bool,\n    getA11yStatusMessage: PropTypes.func,\n    itemToString: PropTypes.func,\n    onChange: PropTypes.func,\n    onSelect: PropTypes.func,\n    onStateChange: PropTypes.func,\n    onInputValueChange: PropTypes.func,\n    onUserAction: PropTypes.func,\n    onOuterClick: PropTypes.func,\n    selectedItemChanged: PropTypes.func,\n    stateReducer: PropTypes.func,\n    itemCount: PropTypes.number,\n    id: PropTypes.string,\n    environment: PropTypes.shape({\n      addEventListener: PropTypes.func,\n      removeEventListener: PropTypes.func,\n      document: PropTypes.shape({\n        getElementById: PropTypes.func,\n        activeElement: PropTypes.any,\n        body: PropTypes.any,\n      }),\n    }),\n    suppressRefError: PropTypes.bool,\n    scrollIntoView: PropTypes.func,\n    // things we keep in state for uncontrolled components\n    // but can accept as props for controlled components\n    /* eslint-disable react/no-unused-prop-types */\n    selectedItem: PropTypes.any,\n    isOpen: PropTypes.bool,\n    inputValue: PropTypes.string,\n    highlightedIndex: PropTypes.number,\n    labelId: PropTypes.string,\n    inputId: PropTypes.string,\n    menuId: PropTypes.string,\n    getItemId: PropTypes.func,\n    /* eslint-enable react/no-unused-prop-types */\n  }\n\n  static defaultProps = {\n    defaultHighlightedIndex: null,\n    defaultIsOpen: false,\n    getA11yStatusMessage,\n    itemToString: i => {\n      if (i == null) {\n        return ''\n      }\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        isPlainObject(i) &&\n        !i.hasOwnProperty('toString')\n      ) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          'downshift: An object was passed to the default implementation of `itemToString`. You should probably provide your own `itemToString` implementation. Please refer to the `itemToString` API documentation.',\n          'The object that was passed:',\n          i,\n        )\n      }\n      return String(i)\n    },\n    onStateChange: noop,\n    onInputValueChange: noop,\n    onUserAction: noop,\n    onChange: noop,\n    onSelect: noop,\n    onOuterClick: noop,\n    selectedItemChanged: (prevItem, item) => prevItem !== item,\n    environment:\n      typeof window === 'undefined' /* istanbul ignore next (ssr) */\n        ? {}\n        : window,\n    stateReducer: (state, stateToSet) => stateToSet,\n    suppressRefError: false,\n    scrollIntoView,\n  }\n\n  static stateChangeTypes = stateChangeTypes\n\n  constructor(props) {\n    super(props)\n    // fancy destructuring + defaults + aliases\n    // this basically says each value of state should either be set to\n    // the initial value or the default value if the initial value is not provided\n    const {\n      defaultHighlightedIndex,\n      initialHighlightedIndex: highlightedIndex = defaultHighlightedIndex,\n      defaultIsOpen,\n      initialIsOpen: isOpen = defaultIsOpen,\n      initialInputValue: inputValue = '',\n      initialSelectedItem: selectedItem = null,\n    } = this.props\n    const state = this.getState({\n      highlightedIndex,\n      isOpen,\n      inputValue,\n      selectedItem,\n    })\n    if (\n      state.selectedItem != null &&\n      this.props.initialInputValue === undefined\n    ) {\n      state.inputValue = this.props.itemToString(state.selectedItem)\n    }\n    this.state = state\n  }\n\n  id = this.props.id || `downshift-${generateId()}`\n  menuId = this.props.menuId || `${this.id}-menu`\n  labelId = this.props.labelId || `${this.id}-label`\n  inputId = this.props.inputId || `${this.id}-input`\n  getItemId = this.props.getItemId || (index => `${this.id}-item-${index}`)\n\n  input = null\n  items = []\n  // itemCount can be changed asynchronously\n  // from within downshift (so it can't come from a prop)\n  // this is why we store it as an instance and use\n  // getItemCount rather than just use items.length\n  // (to support windowing + async)\n  itemCount = null\n  previousResultCount = 0\n\n  timeoutIds = []\n\n  /**\n   * @param {Function} fn the function to call after the time\n   * @param {Number} time the time to wait\n   */\n  internalSetTimeout = (fn, time) => {\n    const id = setTimeout(() => {\n      this.timeoutIds = this.timeoutIds.filter(i => i !== id)\n      fn()\n    }, time)\n\n    this.timeoutIds.push(id)\n  }\n\n  /**\n   * Clear all running timeouts\n   */\n  internalClearTimeouts() {\n    this.timeoutIds.forEach(id => {\n      clearTimeout(id)\n    })\n\n    this.timeoutIds = []\n  }\n\n  /**\n   * Gets the state based on internal state or props\n   * If a state value is passed via props, then that\n   * is the value given, otherwise it's retrieved from\n   * stateToMerge\n   *\n   * @param {Object} stateToMerge defaults to this.state\n   * @return {Object} the state\n   */\n  getState(stateToMerge = this.state) {\n    return getState(stateToMerge, this.props)\n  }\n\n  getItemCount() {\n    // things read better this way. They're in priority order:\n    // 1. `this.itemCount`\n    // 2. `this.props.itemCount`\n    // 3. `this.items.length`\n    let itemCount = this.items.length\n    if (this.itemCount != null) {\n      itemCount = this.itemCount\n    } else if (this.props.itemCount !== undefined) {\n      itemCount = this.props.itemCount\n    }\n    return itemCount\n  }\n\n  setItemCount = count => {\n    this.itemCount = count\n  }\n\n  unsetItemCount = () => {\n    this.itemCount = null\n  }\n\n  getItemNodeFromIndex(index) {\n    return this.props.environment.document.getElementById(this.getItemId(index))\n  }\n\n  setHighlightedIndex = (\n    highlightedIndex = this.props.defaultHighlightedIndex,\n    otherStateToSet = {},\n  ) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState({highlightedIndex, ...otherStateToSet})\n  }\n\n  scrollHighlightedItemIntoView() {\n    /* istanbul ignore else (react-native) */\n    if (!isReactNative) {\n      const node = this.getItemNodeFromIndex(this.getState().highlightedIndex)\n      this.props.scrollIntoView(node, this._menuNode)\n    }\n  }\n\n  moveHighlightedIndex(amount, otherStateToSet) {\n    const itemCount = this.getItemCount()\n    const {highlightedIndex} = this.getState()\n    if (itemCount > 0) {\n      const nextHighlightedIndex = getNextWrappingIndex(\n        amount,\n        highlightedIndex,\n        itemCount,\n        index => this.getItemNodeFromIndex(index),\n      )\n      this.setHighlightedIndex(nextHighlightedIndex, otherStateToSet)\n    }\n  }\n\n  clearSelection = cb => {\n    this.internalSetState(\n      {\n        selectedItem: null,\n        inputValue: '',\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        isOpen: this.props.defaultIsOpen,\n      },\n      cb,\n    )\n  }\n\n  selectItem = (item, otherStateToSet, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      {\n        isOpen: this.props.defaultIsOpen,\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        selectedItem: item,\n        inputValue: this.props.itemToString(item),\n        ...otherStateToSet,\n      },\n      cb,\n    )\n  }\n\n  selectItemAtIndex = (itemIndex, otherStateToSet, cb) => {\n    const item = this.items[itemIndex]\n    if (item == null) {\n      return\n    }\n    this.selectItem(item, otherStateToSet, cb)\n  }\n\n  selectHighlightedItem = (otherStateToSet, cb) => {\n    return this.selectItemAtIndex(\n      this.getState().highlightedIndex,\n      otherStateToSet,\n      cb,\n    )\n  }\n\n  // any piece of our state can live in two places:\n  // 1. Uncontrolled: it's internal (this.state)\n  //    We will call this.setState to update that state\n  // 2. Controlled: it's external (this.props)\n  //    We will call this.props.onStateChange to update that state\n  //\n  // In addition, we'll call this.props.onChange if the\n  // selectedItem is changed.\n  internalSetState = (stateToSet, cb) => {\n    let isItemSelected, onChangeArg\n\n    const onStateChangeArg = {}\n    const isStateToSetFunction = typeof stateToSet === 'function'\n\n    // we want to call `onInputValueChange` before the `setState` call\n    // so someone controlling the `inputValue` state gets notified of\n    // the input change as soon as possible. This avoids issues with\n    // preserving the cursor position.\n    // See https://github.com/downshift-js/downshift/issues/217 for more info.\n    if (!isStateToSetFunction && stateToSet.hasOwnProperty('inputValue')) {\n      this.props.onInputValueChange(stateToSet.inputValue, {\n        ...this.getStateAndHelpers(),\n        ...stateToSet,\n      })\n    }\n    return this.setState(\n      state => {\n        state = this.getState(state)\n        let newStateToSet = isStateToSetFunction\n          ? stateToSet(state)\n          : stateToSet\n\n        // Your own function that could modify the state that will be set.\n        newStateToSet = this.props.stateReducer(state, newStateToSet)\n\n        // checks if an item is selected, regardless of if it's different from\n        // what was selected before\n        // used to determine if onSelect and onChange callbacks should be called\n        isItemSelected = newStateToSet.hasOwnProperty('selectedItem')\n        // this keeps track of the object we want to call with setState\n        const nextState = {}\n        // this is just used to tell whether the state changed\n        const nextFullState = {}\n        // we need to call on change if the outside world is controlling any of our state\n        // and we're trying to update that state. OR if the selection has changed and we're\n        // trying to update the selection\n        if (\n          isItemSelected &&\n          newStateToSet.selectedItem !== state.selectedItem\n        ) {\n          onChangeArg = newStateToSet.selectedItem\n        }\n        newStateToSet.type = newStateToSet.type || stateChangeTypes.unknown\n\n        Object.keys(newStateToSet).forEach(key => {\n          // onStateChangeArg should only have the state that is\n          // actually changing\n          if (state[key] !== newStateToSet[key]) {\n            onStateChangeArg[key] = newStateToSet[key]\n          }\n          // the type is useful for the onStateChangeArg\n          // but we don't actually want to set it in internal state.\n          // this is an undocumented feature for now... Not all internalSetState\n          // calls support it and I'm not certain we want them to yet.\n          // But it enables users controlling the isOpen state to know when\n          // the isOpen state changes due to mouseup events which is quite handy.\n          if (key === 'type') {\n            return\n          }\n          nextFullState[key] = newStateToSet[key]\n          // if it's coming from props, then we don't care to set it internally\n          if (!isControlledProp(this.props, key)) {\n            nextState[key] = newStateToSet[key]\n          }\n        })\n\n        // if stateToSet is a function, then we weren't able to call onInputValueChange\n        // earlier, so we'll call it now that we know what the inputValue state will be.\n        if (\n          isStateToSetFunction &&\n          newStateToSet.hasOwnProperty('inputValue')\n        ) {\n          this.props.onInputValueChange(newStateToSet.inputValue, {\n            ...this.getStateAndHelpers(),\n            ...newStateToSet,\n          })\n        }\n\n        return nextState\n      },\n      () => {\n        // call the provided callback if it's a function\n        cbToCb(cb)()\n\n        // only call the onStateChange and onChange callbacks if\n        // we have relevant information to pass them.\n        const hasMoreStateThanType = Object.keys(onStateChangeArg).length > 1\n        if (hasMoreStateThanType) {\n          this.props.onStateChange(onStateChangeArg, this.getStateAndHelpers())\n        }\n\n        if (isItemSelected) {\n          this.props.onSelect(\n            stateToSet.selectedItem,\n            this.getStateAndHelpers(),\n          )\n        }\n\n        if (onChangeArg !== undefined) {\n          this.props.onChange(onChangeArg, this.getStateAndHelpers())\n        }\n        // this is currently undocumented and therefore subject to change\n        // We'll try to not break it, but just be warned.\n        this.props.onUserAction(onStateChangeArg, this.getStateAndHelpers())\n      },\n    )\n  }\n\n  getStateAndHelpers() {\n    const {highlightedIndex, inputValue, selectedItem, isOpen} = this.getState()\n    const {itemToString} = this.props\n    const {id} = this\n    const {\n      getRootProps,\n      getToggleButtonProps,\n      getLabelProps,\n      getMenuProps,\n      getInputProps,\n      getItemProps,\n      openMenu,\n      closeMenu,\n      toggleMenu,\n      selectItem,\n      selectItemAtIndex,\n      selectHighlightedItem,\n      setHighlightedIndex,\n      clearSelection,\n      clearItems,\n      reset,\n      setItemCount,\n      unsetItemCount,\n      internalSetState: setState,\n    } = this\n    return {\n      // prop getters\n      getRootProps,\n      getToggleButtonProps,\n      getLabelProps,\n      getMenuProps,\n      getInputProps,\n      getItemProps,\n\n      // actions\n      reset,\n      openMenu,\n      closeMenu,\n      toggleMenu,\n      selectItem,\n      selectItemAtIndex,\n      selectHighlightedItem,\n      setHighlightedIndex,\n      clearSelection,\n      clearItems,\n      setItemCount,\n      unsetItemCount,\n      setState,\n\n      // props\n      itemToString,\n\n      // derived\n      id,\n\n      // state\n      highlightedIndex,\n      inputValue,\n      isOpen,\n      selectedItem,\n    }\n  }\n\n  //////////////////////////// ROOT\n\n  rootRef = node => (this._rootNode = node)\n\n  getRootProps = (\n    {refKey = 'ref', ref, ...rest} = {},\n    {suppressRefError = false} = {},\n  ) => {\n    // this is used in the render to know whether the user has called getRootProps.\n    // It uses that to know whether to apply the props automatically\n    this.getRootProps.called = true\n    this.getRootProps.refKey = refKey\n    this.getRootProps.suppressRefError = suppressRefError\n    const {isOpen} = this.getState()\n    return {\n      [refKey]: handleRefs(ref, this.rootRef),\n      role: 'combobox',\n      'aria-expanded': isOpen,\n      'aria-haspopup': 'listbox',\n      'aria-owns': isOpen ? this.menuId : null,\n      'aria-labelledby': this.labelId,\n      ...rest,\n    }\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ROOT\n\n  keyDownHandlers = {\n    ArrowDown(event) {\n      event.preventDefault()\n\n      if (this.getState().isOpen) {\n        const amount = event.shiftKey ? 5 : 1\n        this.moveHighlightedIndex(amount, {\n          type: stateChangeTypes.keyDownArrowDown,\n        })\n      } else {\n        this.internalSetState(\n          {\n            isOpen: true,\n            type: stateChangeTypes.keyDownArrowDown,\n          },\n          () => {\n            const itemCount = this.getItemCount()\n            if (itemCount > 0) {\n              const {highlightedIndex} = this.getState()\n              const nextHighlightedIndex = getNextWrappingIndex(\n                1,\n                highlightedIndex,\n                itemCount,\n                index => this.getItemNodeFromIndex(index),\n              )\n\n              this.setHighlightedIndex(nextHighlightedIndex, {\n                type: stateChangeTypes.keyDownArrowDown,\n              })\n            }\n          },\n        )\n      }\n    },\n\n    ArrowUp(event) {\n      event.preventDefault()\n\n      if (this.getState().isOpen) {\n        const amount = event.shiftKey ? -5 : -1\n        this.moveHighlightedIndex(amount, {\n          type: stateChangeTypes.keyDownArrowUp,\n        })\n      } else {\n        this.internalSetState(\n          {\n            isOpen: true,\n            type: stateChangeTypes.keyDownArrowUp,\n          },\n          () => {\n            const itemCount = this.getItemCount()\n            if (itemCount > 0) {\n              const {highlightedIndex} = this.getState()\n              const nextHighlightedIndex = getNextWrappingIndex(\n                -1,\n                highlightedIndex,\n                itemCount,\n                index => this.getItemNodeFromIndex(index),\n              )\n\n              this.setHighlightedIndex(nextHighlightedIndex, {\n                type: stateChangeTypes.keyDownArrowUp,\n              })\n            }\n          },\n        )\n      }\n    },\n\n    Enter(event) {\n      if (event.which === 229) {\n        return\n      }\n\n      const {isOpen, highlightedIndex} = this.getState()\n      if (isOpen && highlightedIndex != null) {\n        event.preventDefault()\n        const item = this.items[highlightedIndex]\n        const itemNode = this.getItemNodeFromIndex(highlightedIndex)\n        if (item == null || (itemNode && itemNode.hasAttribute('disabled'))) {\n          return\n        }\n        this.selectHighlightedItem({\n          type: stateChangeTypes.keyDownEnter,\n        })\n      }\n    },\n\n    Escape(event) {\n      event.preventDefault()\n      this.reset({\n        type: stateChangeTypes.keyDownEscape,\n        selectedItem: null,\n        inputValue: '',\n      })\n    },\n  }\n\n  //////////////////////////// BUTTON\n\n  buttonKeyDownHandlers = {\n    ...this.keyDownHandlers,\n\n    ' '(event) {\n      event.preventDefault()\n      this.toggleMenu({type: stateChangeTypes.keyDownSpaceButton})\n    },\n  }\n\n  inputKeyDownHandlers = {\n    ...this.keyDownHandlers,\n    Home(event) {\n      event.preventDefault()\n\n      const itemCount = this.getItemCount()\n      const {isOpen} = this.getState()\n\n      if (itemCount <= 0 || !isOpen) {\n        return\n      }\n\n      // get next non-disabled starting downwards from 0 if that's disabled.\n      const newHighlightedIndex = getNextNonDisabledIndex(\n        1,\n        0,\n        itemCount,\n        index => this.getItemNodeFromIndex(index),\n        false,\n      )\n\n      this.setHighlightedIndex(newHighlightedIndex, {\n        type: stateChangeTypes.keyDownHome,\n      })\n    },\n\n    End(event) {\n      event.preventDefault()\n\n      const itemCount = this.getItemCount()\n      const {isOpen} = this.getState()\n\n      if (itemCount <= 0 || !isOpen) {\n        return\n      }\n\n      // get next non-disabled starting upwards from last index if that's disabled.\n      const newHighlightedIndex = getNextNonDisabledIndex(\n        -1,\n        itemCount - 1,\n        itemCount,\n        index => this.getItemNodeFromIndex(index),\n        false,\n      )\n\n      this.setHighlightedIndex(newHighlightedIndex, {\n        type: stateChangeTypes.keyDownEnd,\n      })\n    },\n  }\n\n  getToggleButtonProps = ({\n    onClick,\n    onPress,\n    onKeyDown,\n    onKeyUp,\n    onBlur,\n    ...rest\n  } = {}) => {\n    const {isOpen} = this.getState()\n    const enabledEventHandlers = isReactNative\n      ? /* istanbul ignore next (react-native) */\n        {\n          onPress: callAllEventHandlers(onPress, this.buttonHandleClick),\n        }\n      : {\n          onClick: callAllEventHandlers(onClick, this.buttonHandleClick),\n          onKeyDown: callAllEventHandlers(onKeyDown, this.buttonHandleKeyDown),\n          onKeyUp: callAllEventHandlers(onKeyUp, this.buttonHandleKeyUp),\n          onBlur: callAllEventHandlers(onBlur, this.buttonHandleBlur),\n        }\n    const eventHandlers = rest.disabled ? {} : enabledEventHandlers\n    return {\n      type: 'button',\n      role: 'button',\n      'aria-label': isOpen ? 'close menu' : 'open menu',\n      'aria-haspopup': true,\n      'data-toggle': true,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n\n  buttonHandleKeyUp = event => {\n    // Prevent click event from emitting in Firefox\n    event.preventDefault()\n  }\n\n  buttonHandleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (this.buttonKeyDownHandlers[key]) {\n      this.buttonKeyDownHandlers[key].call(this, event)\n    }\n  }\n\n  buttonHandleClick = event => {\n    event.preventDefault()\n    // handle odd case for Safari and Firefox which\n    // don't give the button the focus properly.\n    /* istanbul ignore if (can't reasonably test this) */\n    if (\n      !isReactNative &&\n      this.props.environment.document.activeElement ===\n        this.props.environment.document.body\n    ) {\n      event.target.focus()\n    }\n    // to simplify testing components that use downshift, we'll not wrap this in a setTimeout\n    // if the NODE_ENV is test. With the proper build system, this should be dead code eliminated\n    // when building for production and should therefore have no impact on production code.\n    if (process.env.NODE_ENV === 'test') {\n      this.toggleMenu({type: stateChangeTypes.clickButton})\n    } else {\n      // Ensure that toggle of menu occurs after the potential blur event in iOS\n      this.internalSetTimeout(() =>\n        this.toggleMenu({type: stateChangeTypes.clickButton}),\n      )\n    }\n  }\n\n  buttonHandleBlur = event => {\n    const blurTarget = event.target // Save blur target for comparison with activeElement later\n    // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not body element\n    this.internalSetTimeout(() => {\n      if (\n        !this.isMouseDown &&\n        (this.props.environment.document.activeElement == null ||\n          this.props.environment.document.activeElement.id !== this.inputId) &&\n        this.props.environment.document.activeElement !== blurTarget // Do nothing if we refocus the same element again (to solve issue in Safari on iOS)\n      ) {\n        this.reset({type: stateChangeTypes.blurButton})\n      }\n    })\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ BUTTON\n\n  /////////////////////////////// LABEL\n\n  getLabelProps = props => {\n    return {htmlFor: this.inputId, id: this.labelId, ...props}\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ LABEL\n\n  /////////////////////////////// INPUT\n\n  getInputProps = ({\n    onKeyDown,\n    onBlur,\n    onChange,\n    onInput,\n    onChangeText,\n    ...rest\n  } = {}) => {\n    let onChangeKey\n    let eventHandlers = {}\n\n    /* istanbul ignore next (preact) */\n    if (isPreact) {\n      onChangeKey = 'onInput'\n    } else {\n      onChangeKey = 'onChange'\n    }\n    const {inputValue, isOpen, highlightedIndex} = this.getState()\n\n    if (!rest.disabled) {\n      eventHandlers = {\n        [onChangeKey]: callAllEventHandlers(\n          onChange,\n          onInput,\n          this.inputHandleChange,\n        ),\n        onKeyDown: callAllEventHandlers(onKeyDown, this.inputHandleKeyDown),\n        onBlur: callAllEventHandlers(onBlur, this.inputHandleBlur),\n      }\n    }\n\n    /* istanbul ignore if (react-native) */\n    if (isReactNative) {\n      eventHandlers = {\n        onChange: callAllEventHandlers(\n          onChange,\n          onInput,\n          this.inputHandleChange,\n        ),\n        onChangeText: callAllEventHandlers(onChangeText, onInput, text =>\n          this.inputHandleChange({nativeEvent: {text}}),\n        ),\n        onBlur: callAllEventHandlers(onBlur, this.inputHandleBlur),\n      }\n    }\n\n    return {\n      'aria-autocomplete': 'list',\n      'aria-activedescendant':\n        isOpen && typeof highlightedIndex === 'number' && highlightedIndex >= 0\n          ? this.getItemId(highlightedIndex)\n          : null,\n      'aria-controls': isOpen ? this.menuId : null,\n      'aria-labelledby': this.labelId,\n      // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\n      // revert back since autocomplete=\"nope\" is ignored on latest Chrome and Opera\n      autoComplete: 'off',\n      value: inputValue,\n      id: this.inputId,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n\n  inputHandleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (key && this.inputKeyDownHandlers[key]) {\n      this.inputKeyDownHandlers[key].call(this, event)\n    }\n  }\n\n  inputHandleChange = event => {\n    this.internalSetState({\n      type: stateChangeTypes.changeInput,\n      isOpen: true,\n      inputValue: isReactNative\n        ? /* istanbul ignore next (react-native) */ event.nativeEvent.text\n        : event.target.value,\n      highlightedIndex: this.props.defaultHighlightedIndex,\n    })\n  }\n\n  inputHandleBlur = () => {\n    // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not the body element\n    this.internalSetTimeout(() => {\n      const downshiftButtonIsActive =\n        this.props.environment.document &&\n        !!this.props.environment.document.activeElement &&\n        !!this.props.environment.document.activeElement.dataset &&\n        this.props.environment.document.activeElement.dataset.toggle &&\n        this._rootNode &&\n        this._rootNode.contains(this.props.environment.document.activeElement)\n      if (!this.isMouseDown && !downshiftButtonIsActive) {\n        this.reset({type: stateChangeTypes.blurInput})\n      }\n    })\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ INPUT\n\n  /////////////////////////////// MENU\n\n  menuRef = node => {\n    this._menuNode = node\n  }\n\n  getMenuProps = (\n    {refKey = 'ref', ref, ...props} = {},\n    {suppressRefError = false} = {},\n  ) => {\n    this.getMenuProps.called = true\n    this.getMenuProps.refKey = refKey\n    this.getMenuProps.suppressRefError = suppressRefError\n\n    return {\n      [refKey]: handleRefs(ref, this.menuRef),\n      role: 'listbox',\n      'aria-labelledby': props && props['aria-label'] ? null : this.labelId,\n      id: this.menuId,\n      ...props,\n    }\n  }\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ MENU\n\n  /////////////////////////////// ITEM\n  getItemProps = ({\n    onMouseMove,\n    onMouseDown,\n    onClick,\n    onPress,\n    index,\n    item = process.env.NODE_ENV === 'production'\n      ? /* istanbul ignore next */ undefined\n      : requiredProp('getItemProps', 'item'),\n    ...rest\n  } = {}) => {\n    if (index === undefined) {\n      this.items.push(item)\n      index = this.items.indexOf(item)\n    } else {\n      this.items[index] = item\n    }\n\n    const onSelectKey = isReactNative\n      ? /* istanbul ignore next (react-native) */ 'onPress'\n      : 'onClick'\n    const customClickHandler = isReactNative\n      ? /* istanbul ignore next (react-native) */ onPress\n      : onClick\n\n    const enabledEventHandlers = {\n      // onMouseMove is used over onMouseEnter here. onMouseMove\n      // is only triggered on actual mouse movement while onMouseEnter\n      // can fire on DOM changes, interrupting keyboard navigation\n      onMouseMove: callAllEventHandlers(onMouseMove, () => {\n        if (index === this.getState().highlightedIndex) {\n          return\n        }\n        this.setHighlightedIndex(index, {\n          type: stateChangeTypes.itemMouseEnter,\n        })\n\n        // We never want to manually scroll when changing state based\n        // on `onMouseMove` because we will be moving the element out\n        // from under the user which is currently scrolling/moving the\n        // cursor\n        this.avoidScrolling = true\n        this.internalSetTimeout(() => (this.avoidScrolling = false), 250)\n      }),\n      onMouseDown: callAllEventHandlers(onMouseDown, event => {\n        // This prevents the activeElement from being changed\n        // to the item so it can remain with the current activeElement\n        // which is a more common use case.\n        event.preventDefault()\n      }),\n      [onSelectKey]: callAllEventHandlers(customClickHandler, () => {\n        this.selectItemAtIndex(index, {\n          type: stateChangeTypes.clickItem,\n        })\n      }),\n    }\n\n    // Passing down the onMouseDown handler to prevent redirect\n    // of the activeElement if clicking on disabled items\n    const eventHandlers = rest.disabled\n      ? {onMouseDown: enabledEventHandlers.onMouseDown}\n      : enabledEventHandlers\n\n    return {\n      id: this.getItemId(index),\n      role: 'option',\n      'aria-selected': this.getState().highlightedIndex === index,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ITEM\n\n  clearItems = () => {\n    this.items = []\n  }\n\n  reset = (otherStateToSet = {}, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      ({selectedItem}) => ({\n        isOpen: this.props.defaultIsOpen,\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        inputValue: this.props.itemToString(selectedItem),\n        ...otherStateToSet,\n      }),\n      cb,\n    )\n  }\n\n  toggleMenu = (otherStateToSet = {}, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      ({isOpen}) => {\n        return {\n          isOpen: !isOpen,\n          ...(isOpen && {\n            highlightedIndex: this.props.defaultHighlightedIndex,\n          }),\n          ...otherStateToSet,\n        }\n      },\n      () => {\n        const {isOpen, highlightedIndex} = this.getState()\n        if (isOpen) {\n          if (this.getItemCount() > 0 && typeof highlightedIndex === 'number') {\n            this.setHighlightedIndex(highlightedIndex, otherStateToSet)\n          }\n        }\n        cbToCb(cb)()\n      },\n    )\n  }\n\n  openMenu = cb => {\n    this.internalSetState({isOpen: true}, cb)\n  }\n\n  closeMenu = cb => {\n    this.internalSetState({isOpen: false}, cb)\n  }\n\n  updateStatus = debounce(() => {\n    const state = this.getState()\n    const item = this.items[state.highlightedIndex]\n    const resultCount = this.getItemCount()\n    const status = this.props.getA11yStatusMessage({\n      itemToString: this.props.itemToString,\n      previousResultCount: this.previousResultCount,\n      resultCount,\n      highlightedItem: item,\n      ...state,\n    })\n    this.previousResultCount = resultCount\n\n    setA11yStatus(status, this.props.environment.document)\n  }, 200)\n\n  componentDidMount() {\n    /* istanbul ignore if (react-native) */\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      !isReactNative &&\n      this.getMenuProps.called &&\n      !this.getMenuProps.suppressRefError\n    ) {\n      validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps)\n    }\n\n    /* istanbul ignore if (react-native) */\n    if (isReactNative) {\n      this.cleanup = () => {\n        this.internalClearTimeouts()\n      }\n    } else {\n      // this.isMouseDown helps us track whether the mouse is currently held down.\n      // This is useful when the user clicks on an item in the list, but holds the mouse\n      // down long enough for the list to disappear (because the blur event fires on the input)\n      // this.isMouseDown is used in the blur handler on the input to determine whether the blur event should\n      // trigger hiding the menu.\n      const onMouseDown = () => {\n        this.isMouseDown = true\n      }\n      const onMouseUp = event => {\n        this.isMouseDown = false\n        // if the target element or the activeElement is within a downshift node\n        // then we don't want to reset downshift\n        const contextWithinDownshift = targetWithinDownshift(\n          event.target,\n          [this._rootNode, this._menuNode],\n          this.props.environment.document,\n        )\n        if (!contextWithinDownshift && this.getState().isOpen) {\n          this.reset({type: stateChangeTypes.mouseUp}, () =>\n            this.props.onOuterClick(this.getStateAndHelpers()),\n          )\n        }\n      }\n      // Touching an element in iOS gives focus and hover states, but touching out of\n      // the element will remove hover, and persist the focus state, resulting in the\n      // blur event not being triggered.\n      // this.isTouchMove helps us track whether the user is tapping or swiping on a touch screen.\n      // If the user taps outside of Downshift, the component should be reset,\n      // but not if the user is swiping\n      const onTouchStart = () => {\n        this.isTouchMove = false\n      }\n\n      const onTouchMove = () => {\n        this.isTouchMove = true\n      }\n\n      const onTouchEnd = event => {\n        const contextWithinDownshift = targetWithinDownshift(\n          event.target,\n          [this._rootNode, this._menuNode],\n          this.props.environment.document,\n          false,\n        )\n        if (\n          !this.isTouchMove &&\n          !contextWithinDownshift &&\n          this.getState().isOpen\n        ) {\n          this.reset({type: stateChangeTypes.touchEnd}, () =>\n            this.props.onOuterClick(this.getStateAndHelpers()),\n          )\n        }\n      }\n      const {environment} = this.props\n\n      environment.addEventListener('mousedown', onMouseDown)\n      environment.addEventListener('mouseup', onMouseUp)\n      environment.addEventListener('touchstart', onTouchStart)\n      environment.addEventListener('touchmove', onTouchMove)\n      environment.addEventListener('touchend', onTouchEnd)\n\n      this.cleanup = () => {\n        this.internalClearTimeouts()\n        this.updateStatus.cancel()\n        environment.removeEventListener('mousedown', onMouseDown)\n        environment.removeEventListener('mouseup', onMouseUp)\n        environment.removeEventListener('touchstart', onTouchStart)\n        environment.removeEventListener('touchmove', onTouchMove)\n        environment.removeEventListener('touchend', onTouchEnd)\n      }\n    }\n  }\n\n  shouldScroll(prevState, prevProps) {\n    const {highlightedIndex: currentHighlightedIndex} =\n      this.props.highlightedIndex === undefined ? this.getState() : this.props\n    const {highlightedIndex: prevHighlightedIndex} =\n      prevProps.highlightedIndex === undefined ? prevState : prevProps\n    const scrollWhenOpen =\n      currentHighlightedIndex && this.getState().isOpen && !prevState.isOpen\n    const scrollWhenNavigating =\n      currentHighlightedIndex !== prevHighlightedIndex\n\n    return scrollWhenOpen || scrollWhenNavigating\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (process.env.NODE_ENV !== 'production') {\n      validateControlledUnchanged(this.state, prevProps, this.props)\n      /* istanbul ignore if (react-native) */\n      if (\n        !isReactNative &&\n        this.getMenuProps.called &&\n        !this.getMenuProps.suppressRefError\n      ) {\n        validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps)\n      }\n    }\n\n    if (\n      isControlledProp(this.props, 'selectedItem') &&\n      this.props.selectedItemChanged(\n        prevProps.selectedItem,\n        this.props.selectedItem,\n      )\n    ) {\n      this.internalSetState({\n        type: stateChangeTypes.controlledPropUpdatedSelectedItem,\n        inputValue: this.props.itemToString(this.props.selectedItem),\n      })\n    }\n\n    if (!this.avoidScrolling && this.shouldScroll(prevState, prevProps)) {\n      this.scrollHighlightedItemIntoView()\n    }\n\n    /* istanbul ignore else (react-native) */\n    if (!isReactNative) {\n      this.updateStatus()\n    }\n  }\n\n  componentWillUnmount() {\n    this.cleanup() // avoids memory leak\n  }\n\n  render() {\n    const children = unwrapArray(this.props.children, noop)\n    // because the items are rerendered every time we call the children\n    // we clear this out each render and it will be populated again as\n    // getItemProps is called.\n    this.clearItems()\n    // we reset this so we know whether the user calls getRootProps during\n    // this render. If they do then we don't need to do anything,\n    // if they don't then we need to clone the element they return and\n    // apply the props for them.\n    this.getRootProps.called = false\n    this.getRootProps.refKey = undefined\n    this.getRootProps.suppressRefError = undefined\n    // we do something similar for getMenuProps\n    this.getMenuProps.called = false\n    this.getMenuProps.refKey = undefined\n    this.getMenuProps.suppressRefError = undefined\n    // we do something similar for getLabelProps\n    this.getLabelProps.called = false\n    // and something similar for getInputProps\n    this.getInputProps.called = false\n    const element = unwrapArray(children(this.getStateAndHelpers()))\n    if (!element) {\n      return null\n    }\n\n    if (this.getRootProps.called || this.props.suppressRefError) {\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        !this.getRootProps.suppressRefError &&\n        !this.props.suppressRefError\n      ) {\n        validateGetRootPropsCalledCorrectly(element, this.getRootProps)\n      }\n      return element\n    } else if (isDOMElement(element)) {\n      // they didn't apply the root props, but we can clone\n      // this and apply the props ourselves\n      return cloneElement(element, this.getRootProps(getElementProps(element)))\n    }\n\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      // they didn't apply the root props, but they need to\n      // otherwise we can't query around the autocomplete\n\n      throw new Error(\n        'downshift: If you return a non-DOM element, you must apply the getRootProps function',\n      )\n    }\n\n    /* istanbul ignore next */\n    return undefined\n  }\n}\n\nexport default Downshift\n\nfunction validateGetMenuPropsCalledCorrectly(node, {refKey}) {\n  if (!node) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `downshift: The ref prop \"${refKey}\" from getMenuProps was not applied correctly on your menu element.`,\n    )\n  }\n}\n\nfunction validateGetRootPropsCalledCorrectly(element, {refKey}) {\n  const refKeySpecified = refKey !== 'ref'\n  const isComposite = !isDOMElement(element)\n  if (isComposite && !refKeySpecified && !isForwardRef(element)) {\n    // eslint-disable-next-line no-console\n    console.error(\n      'downshift: You returned a non-DOM element. You must specify a refKey in getRootProps',\n    )\n  } else if (!isComposite && refKeySpecified) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `downshift: You returned a DOM element. You should not specify a refKey in getRootProps. You specified \"${refKey}\"`,\n    )\n  }\n  if (!isForwardRef(element) && !getElementProps(element)[refKey]) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `downshift: You must apply the ref prop \"${refKey}\" from getRootProps onto your root element.`,\n    )\n  }\n}\n","import setPrototypeOf from \"./setPrototypeOf.js\";\nexport default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  setPrototypeOf(subClass, superClass);\n}","import PropTypes from 'prop-types'\nimport {useRef, useCallback, useReducer, useEffect} from 'react'\nimport {\n  scrollIntoView,\n  getNextWrappingIndex,\n  getState,\n  generateId,\n  debounce,\n  targetWithinDownshift,\n} from '../utils'\nimport setStatus from '../set-a11y-status'\n\nconst dropdownDefaultStateValues = {\n  highlightedIndex: -1,\n  isOpen: false,\n  selectedItem: null,\n  inputValue: '',\n}\n\nfunction callOnChangeProps(action, state, newState) {\n  const {props, type} = action\n  const changes = {}\n\n  Object.keys(state).forEach(key => {\n    invokeOnChangeHandler(key, props, state, newState)\n\n    if (newState[key] !== state[key]) {\n      changes[key] = newState[key]\n    }\n  })\n\n  if (props.onStateChange && Object.keys(changes).length) {\n    props.onStateChange({type, ...changes})\n  }\n}\n\nfunction invokeOnChangeHandler(key, props, state, newState) {\n  const handler = `on${capitalizeString(key)}Change`\n  if (\n    props[handler] &&\n    newState[key] !== undefined &&\n    newState[key] !== state[key]\n  ) {\n    props[handler](newState)\n  }\n}\n\n/**\n * Default state reducer that returns the changes.\n *\n * @param {Object} s state.\n * @param {Object} a action with changes.\n * @returns {Object} changes.\n */\nfunction stateReducer(s, a) {\n  return a.changes\n}\n\n/**\n * Returns a message to be added to aria-live region when item is selected.\n *\n * @param {Object} selectionParameters Parameters required to build the message.\n * @returns {string} The a11y message.\n */\nfunction getA11ySelectionMessage(selectionParameters) {\n  const {selectedItem, itemToString: itemToStringLocal} = selectionParameters\n\n  return selectedItem\n    ? `${itemToStringLocal(selectedItem)} has been selected.`\n    : ''\n}\n\n/**\n * Debounced call for updating the a11y message.\n */\nexport const updateA11yStatus = debounce((getA11yMessage, document) => {\n  setStatus(getA11yMessage(), document)\n}, 200)\n\nexport function getElementIds({\n  id,\n  labelId,\n  menuId,\n  getItemId,\n  toggleButtonId,\n}) {\n  const uniqueId = id === undefined ? `downshift-${generateId()}` : id\n\n  return {\n    labelId: labelId || `${uniqueId}-label`,\n    menuId: menuId || `${uniqueId}-menu`,\n    getItemId: getItemId || (index => `${uniqueId}-item-${index}`),\n    toggleButtonId: toggleButtonId || `${uniqueId}-toggle-button`,\n  }\n}\n\nexport function getItemIndex(index, item, items) {\n  if (index !== undefined) {\n    return index\n  }\n  if (items.length === 0) {\n    return -1\n  }\n  return items.indexOf(item)\n}\n\nfunction itemToString(item) {\n  return item ? String(item) : ''\n}\n\nexport function getPropTypesValidator(caller, propTypes) {\n  // istanbul ignore next\n  return function validate(options = {}) {\n    Object.keys(propTypes).forEach(key => {\n      PropTypes.checkPropTypes(propTypes, options, key, caller.name)\n    })\n  }\n}\n\nexport function isAcceptedCharacterKey(key) {\n  return /^\\S{1}$/.test(key)\n}\n\nexport function capitalizeString(string) {\n  return `${string.slice(0, 1).toUpperCase()}${string.slice(1)}`\n}\n\nexport function useLatestRef(val) {\n  const ref = useRef(val)\n  // technically this is not \"concurrent mode safe\" because we're manipulating\n  // the value during render (so it's not idempotent). However, the places this\n  // hook is used is to support memoizing callbacks which will be called\n  // *during* render, so we need the latest values *during* render.\n  // If not for this, then we'd probably want to use useLayoutEffect instead.\n  ref.current = val\n  return ref\n}\n\n/**\n * Computes the controlled state using a the previous state, props,\n * two reducers, one from downshift and an optional one from the user.\n * Also calls the onChange handlers for state values that have changed.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @param {Function} isStateEqual Function that checks if a previous state is equal to the next.\n * @returns {Array} An array with the state and an action dispatcher.\n */\nexport function useEnhancedReducer(reducer, initialState, props, isStateEqual) {\n  const prevStateRef = useRef()\n  const actionRef = useRef()\n  const enhancedReducer = useCallback(\n    (state, action) => {\n      actionRef.current = action\n      state = getState(state, action.props)\n\n      const changes = reducer(state, action)\n      const newState = action.props.stateReducer(state, {...action, changes})\n\n      return newState\n    },\n    [reducer],\n  )\n  const [state, dispatch] = useReducer(enhancedReducer, initialState)\n  const propsRef = useLatestRef(props)\n  const dispatchWithProps = useCallback(\n    action => dispatch({props: propsRef.current, ...action}),\n    [propsRef],\n  )\n  const action = actionRef.current\n\n  useEffect(() => {\n    const shouldCallOnChangeProps =\n    action &&\n    prevStateRef.current &&\n    !isStateEqual(prevStateRef.current, state)\n\n    if (shouldCallOnChangeProps) {\n      callOnChangeProps(\n        action,\n        getState(prevStateRef.current, action.props),\n        state,\n      )\n    }\n\n    prevStateRef.current = state\n  }, [state, action, isStateEqual])\n\n  return [state, dispatchWithProps]\n}\n\n/**\n * Wraps the useEnhancedReducer and applies the controlled prop values before\n * returning the new state.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @param {Function} isStateEqual Function that checks if a previous state is equal to the next.\n * @returns {Array} An array with the state and an action dispatcher.\n */\nexport function useControlledReducer(reducer, initialState, props, isStateEqual) {\n  const [state, dispatch] = useEnhancedReducer(reducer, initialState, props, isStateEqual)\n\n  return [getState(state, props), dispatch]\n}\n\nexport const defaultProps = {\n  itemToString,\n  stateReducer,\n  getA11ySelectionMessage,\n  scrollIntoView,\n  circularNavigation: false,\n  environment:\n    typeof window === 'undefined' /* istanbul ignore next (ssr) */\n      ? {}\n      : window,\n}\n\nexport function getDefaultValue(\n  props,\n  propKey,\n  defaultStateValues = dropdownDefaultStateValues,\n) {\n  const defaultPropKey = `default${capitalizeString(propKey)}`\n\n  if (defaultPropKey in props) {\n    return props[defaultPropKey]\n  }\n\n  return defaultStateValues[propKey]\n}\n\nexport function getInitialValue(\n  props,\n  propKey,\n  defaultStateValues = dropdownDefaultStateValues,\n) {\n  if (propKey in props) {\n    return props[propKey]\n  }\n\n  const initialPropKey = `initial${capitalizeString(propKey)}`\n\n  if (initialPropKey in props) {\n    return props[initialPropKey]\n  }\n  return getDefaultValue(props, propKey, defaultStateValues)\n}\n\nexport function getInitialState(props) {\n  const selectedItem = getInitialValue(props, 'selectedItem')\n  const isOpen = getInitialValue(props, 'isOpen')\n  const highlightedIndex = getInitialValue(props, 'highlightedIndex')\n  const inputValue = getInitialValue(props, 'inputValue')\n\n  return {\n    highlightedIndex:\n      highlightedIndex < 0 && selectedItem\n        ? props.items.indexOf(selectedItem)\n        : highlightedIndex,\n    isOpen,\n    selectedItem,\n    inputValue,\n  }\n}\n\nexport function getHighlightedIndexOnOpen(\n  props,\n  state,\n  offset,\n  getItemNodeFromIndex,\n) {\n  const {items, initialHighlightedIndex, defaultHighlightedIndex} = props\n  const {selectedItem, highlightedIndex} = state\n\n  if (items.length === 0) {\n    return -1\n  }\n\n  // initialHighlightedIndex will give value to highlightedIndex on initial state only.\n  if (\n    initialHighlightedIndex !== undefined &&\n    highlightedIndex === initialHighlightedIndex\n  ) {\n    return initialHighlightedIndex\n  }\n  if (defaultHighlightedIndex !== undefined) {\n    return defaultHighlightedIndex\n  }\n  if (selectedItem) {\n    if (offset === 0) {\n      return items.indexOf(selectedItem)\n    }\n    return getNextWrappingIndex(\n      offset,\n      items.indexOf(selectedItem),\n      items.length,\n      getItemNodeFromIndex,\n      false,\n    )\n  }\n  if (offset === 0) {\n    return -1\n  }\n  return offset < 0 ? items.length - 1 : 0\n}\n\n/**\n * Reuse the movement tracking of mouse and touch events.\n *\n * @param {boolean} isOpen Whether the dropdown is open or not.\n * @param {Array<Object>} downshiftElementRefs Downshift element refs to track movement (toggleButton, menu etc.)\n * @param {Object} environment Environment where component/hook exists.\n * @param {Function} handleBlur Handler on blur from mouse or touch.\n * @returns {Object} Ref containing whether mouseDown or touchMove event is happening\n */\nexport function useMouseAndTouchTracker(\n  isOpen,\n  downshiftElementRefs,\n  environment,\n  handleBlur,\n) {\n  const mouseAndTouchTrackersRef = useRef({\n    isMouseDown: false,\n    isTouchMove: false,\n  })\n\n  useEffect(() => {\n    // The same strategy for checking if a click occurred inside or outside downsift\n    // as in downshift.js.\n    const onMouseDown = () => {\n      mouseAndTouchTrackersRef.current.isMouseDown = true\n    }\n    const onMouseUp = event => {\n      mouseAndTouchTrackersRef.current.isMouseDown = false\n      if (\n        isOpen &&\n        !targetWithinDownshift(\n          event.target,\n          downshiftElementRefs.map(ref => ref.current),\n          environment.document,\n        )\n      ) {\n        handleBlur()\n      }\n    }\n    const onTouchStart = () => {\n      mouseAndTouchTrackersRef.current.isTouchMove = false\n    }\n    const onTouchMove = () => {\n      mouseAndTouchTrackersRef.current.isTouchMove = true\n    }\n    const onTouchEnd = event => {\n      if (\n        isOpen &&\n        !mouseAndTouchTrackersRef.current.isTouchMove &&\n        !targetWithinDownshift(\n          event.target,\n          downshiftElementRefs.map(ref => ref.current),\n          environment.document,\n          false,\n        )\n      ) {\n        handleBlur()\n      }\n    }\n\n    environment.addEventListener('mousedown', onMouseDown)\n    environment.addEventListener('mouseup', onMouseUp)\n    environment.addEventListener('touchstart', onTouchStart)\n    environment.addEventListener('touchmove', onTouchMove)\n    environment.addEventListener('touchend', onTouchEnd)\n\n    return function cleanup() {\n      environment.removeEventListener('mousedown', onMouseDown)\n      environment.removeEventListener('mouseup', onMouseUp)\n      environment.removeEventListener('touchstart', onTouchStart)\n      environment.removeEventListener('touchmove', onTouchMove)\n      environment.removeEventListener('touchend', onTouchEnd)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen, environment])\n\n  return mouseAndTouchTrackersRef\n}\n\n/**\n * Custom hook that checks if getter props are called correctly.\n *\n * @param  {...any} propKeys Getter prop names to be handled.\n * @returns {Function} Setter function called inside getter props to set call information.\n */\nexport function useGetterPropsCalledChecker(...propKeys) {\n  const getterPropsCalledRef = useRef(\n    propKeys.reduce((acc, propKey) => {\n      acc[propKey] = {}\n      return acc\n    }, {}),\n  )\n\n  if (process.env.NODE_ENV !== 'production') {\n    Object.keys(getterPropsCalledRef.current).forEach(propKey => {\n      getterPropsCalledRef.current[propKey] = null\n    })\n  }\n\n  useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      Object.keys(getterPropsCalledRef.current).forEach(propKey => {\n        if (!getterPropsCalledRef.current[propKey]) {\n          // eslint-disable-next-line no-console\n          console.error(\n            `downshift: You forgot to call the ${propKey} getter function on your component / element.`,\n          )\n          return\n        }\n\n        const {\n          suppressRefError,\n          refKey,\n          elementRef,\n        } = getterPropsCalledRef.current[propKey]\n\n        if ((!elementRef || !elementRef.current) && !suppressRefError) {\n          // eslint-disable-next-line no-console\n          console.error(\n            `downshift: The ref prop \"${refKey}\" from ${propKey} was not applied correctly on your element.`,\n          )\n        }\n      })\n    }\n  })\n\n  const setGetterPropCallInfo = useCallback(\n    (propKey, suppressRefError, refKey, elementRef) => {\n      if (process.env.NODE_ENV !== 'production') {\n        getterPropsCalledRef.current[propKey] = {\n          suppressRefError,\n          refKey,\n          elementRef,\n        }\n      }\n    },\n    [],\n  )\n\n  return setGetterPropCallInfo\n}\n\n/**\n * Check if a state is equal for dropdowns, by comparing isOpen, inputValue, highlightedIndex and selected item.\n * Used by useSelect and useCombobox.\n *\n * @param {Object} prevState\n * @param {Object} newState\n * @returns {boolean} Wheather the states are deeply equal.\n */\n export function isDropdownsStateEqual(prevState, newState) {\n  return (\n    prevState.isOpen === newState.isOpen &&\n    prevState.inputValue === newState.inputValue &&\n    prevState.highlightedIndex === newState.highlightedIndex &&\n    prevState.selectedItem === newState.selectedItem\n  )\n}\n","import PropTypes from 'prop-types'\nimport {defaultProps as commonDefaultProps} from '../utils'\n\nfunction getItemIndexByCharacterKey(\n  keysSoFar,\n  highlightedIndex,\n  items,\n  itemToStringParam,\n  getItemNodeFromIndex,\n) {\n  const lowerCasedItemStrings = items.map(item =>\n    itemToStringParam(item).toLowerCase(),\n  )\n  const lowerCasedKeysSoFar = keysSoFar.toLowerCase()\n  const isValid = (itemString, index) => {\n    const element = getItemNodeFromIndex(index)\n\n    return (\n      itemString.startsWith(lowerCasedKeysSoFar) &&\n      !(element && element.hasAttribute('disabled'))\n    )\n  }\n\n  for (\n    let index = highlightedIndex + 1;\n    index < lowerCasedItemStrings.length;\n    index++\n  ) {\n    const itemString = lowerCasedItemStrings[index]\n\n    if (isValid(itemString, index)) {\n      return index\n    }\n  }\n\n  for (let index = 0; index < highlightedIndex; index++) {\n    const itemString = lowerCasedItemStrings[index]\n\n    if (isValid(itemString, index)) {\n      return index\n    }\n  }\n\n  return highlightedIndex\n}\n\nconst propTypes = {\n  items: PropTypes.array.isRequired,\n  itemToString: PropTypes.func,\n  getA11yStatusMessage: PropTypes.func,\n  getA11ySelectionMessage: PropTypes.func,\n  circularNavigation: PropTypes.bool,\n  highlightedIndex: PropTypes.number,\n  defaultHighlightedIndex: PropTypes.number,\n  initialHighlightedIndex: PropTypes.number,\n  isOpen: PropTypes.bool,\n  defaultIsOpen: PropTypes.bool,\n  initialIsOpen: PropTypes.bool,\n  selectedItem: PropTypes.any,\n  initialSelectedItem: PropTypes.any,\n  defaultSelectedItem: PropTypes.any,\n  id: PropTypes.string,\n  labelId: PropTypes.string,\n  menuId: PropTypes.string,\n  getItemId: PropTypes.func,\n  toggleButtonId: PropTypes.string,\n  stateReducer: PropTypes.func,\n  onSelectedItemChange: PropTypes.func,\n  onHighlightedIndexChange: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onIsOpenChange: PropTypes.func,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any,\n    }),\n  }),\n}\n\n/**\n * Default implementation for status message. Only added when menu is open.\n * Will specift if there are results in the list, and if so, how many,\n * and what keys are relevant.\n *\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */\nfunction getA11yStatusMessage({isOpen, resultCount, previousResultCount}) {\n  if (!isOpen) {\n    return ''\n  }\n\n  if (!resultCount) {\n    return 'No results are available.'\n  }\n\n  if (resultCount !== previousResultCount) {\n    return `${resultCount} result${\n      resultCount === 1 ? ' is' : 's are'\n    } available, use up and down arrow keys to navigate. Press Enter or Space Bar keys to select.`\n  }\n  \n  return ''\n}\n\nconst defaultProps = {\n  ...commonDefaultProps,\n  getA11yStatusMessage,\n}\n\nexport {propTypes, getItemIndexByCharacterKey, defaultProps}\n","import productionEnum from '../../productionEnum.macro'\n\nexport const MenuKeyDownArrowDown = productionEnum(\n  '__menu_keydown_arrow_down__',\n)\nexport const MenuKeyDownArrowUp = productionEnum('__menu_keydown_arrow_up__')\nexport const MenuKeyDownEscape = productionEnum('__menu_keydown_escape__')\nexport const MenuKeyDownHome = productionEnum('__menu_keydown_home__')\nexport const MenuKeyDownEnd = productionEnum('__menu_keydown_end__')\nexport const MenuKeyDownEnter = productionEnum('__menu_keydown_enter__')\nexport const MenuKeyDownSpaceButton = productionEnum(\n  '__menu_keydown_space_button__',\n)\nexport const MenuKeyDownCharacter = productionEnum('__menu_keydown_character__')\nexport const MenuBlur = productionEnum('__menu_blur__')\nexport const MenuMouseLeave = productionEnum('__menu_mouse_leave__')\n\nexport const ItemMouseMove = productionEnum('__item_mouse_move__')\nexport const ItemClick = productionEnum('__item_click__')\n\nexport const ToggleButtonClick = productionEnum('__togglebutton_click__')\nexport const ToggleButtonKeyDownArrowDown = productionEnum(\n  '__togglebutton_keydown_arrow_down__',\n)\nexport const ToggleButtonKeyDownArrowUp = productionEnum(\n  '__togglebutton_keydown_arrow_up__',\n)\nexport const ToggleButtonKeyDownCharacter = productionEnum(\n  '__togglebutton_keydown_character__',\n)\n\nexport const FunctionToggleMenu = productionEnum('__function_toggle_menu__')\nexport const FunctionOpenMenu = productionEnum('__function_open_menu__')\nexport const FunctionCloseMenu = productionEnum('__function_close_menu__')\nexport const FunctionSetHighlightedIndex = productionEnum(\n  '__function_set_highlighted_index__',\n)\nexport const FunctionSelectItem = productionEnum('__function_select_item__')\nexport const FunctionSetInputValue = productionEnum(\n  '__function_set_input_value__',\n)\nexport const FunctionReset = productionEnum('__function_reset__')\n","import {getNextWrappingIndex, getNextNonDisabledIndex} from '../../utils'\nimport {getHighlightedIndexOnOpen, getDefaultValue} from '../utils'\nimport {getItemIndexByCharacterKey} from './utils'\nimport * as stateChangeTypes from './stateChangeTypes'\n\n/* eslint-disable complexity */\nexport default function downshiftSelectReducer(state, action) {\n  const {type, props, shiftKey} = action\n  let changes\n\n  switch (type) {\n    case stateChangeTypes.ItemMouseMove:\n      changes = {\n        highlightedIndex: action.index,\n      }\n\n      break\n    case stateChangeTypes.ItemClick:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        selectedItem: props.items[action.index],\n      }\n\n      break\n    case stateChangeTypes.ToggleButtonKeyDownCharacter:\n      {\n        const lowercasedKey = action.key\n        const inputValue = `${state.inputValue}${lowercasedKey}`\n        const itemIndex = getItemIndexByCharacterKey(\n          inputValue,\n          state.selectedItem ? props.items.indexOf(state.selectedItem) : -1,\n          props.items,\n          props.itemToString,\n          action.getItemNodeFromIndex,\n        )\n\n        changes = {\n          inputValue,\n          ...(itemIndex >= 0 && {\n            selectedItem: props.items[itemIndex],\n          }),\n        }\n      }\n\n      break\n    case stateChangeTypes.ToggleButtonKeyDownArrowDown:\n      changes = {\n        highlightedIndex: getHighlightedIndexOnOpen(\n          props,\n          state,\n          1,\n          action.getItemNodeFromIndex,\n        ),\n        isOpen: true,\n      }\n\n      break\n    case stateChangeTypes.ToggleButtonKeyDownArrowUp:\n      changes = {\n        highlightedIndex: getHighlightedIndexOnOpen(\n          props,\n          state,\n          -1,\n          action.getItemNodeFromIndex,\n        ),\n        isOpen: true,\n      }\n\n      break\n    case stateChangeTypes.MenuKeyDownEnter:\n    case stateChangeTypes.MenuKeyDownSpaceButton:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        ...(state.highlightedIndex >= 0 && {\n          selectedItem: props.items[state.highlightedIndex],\n        }),\n      }\n\n      break\n    case stateChangeTypes.MenuKeyDownHome:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(\n          1,\n          0,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          false,\n        ),\n      }\n\n      break\n    case stateChangeTypes.MenuKeyDownEnd:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(\n          -1,\n          props.items.length - 1,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          false,\n        ),\n      }\n\n      break\n    case stateChangeTypes.MenuKeyDownEscape:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1,\n      }\n\n      break\n    case stateChangeTypes.MenuBlur:\n      changes = {\n        isOpen: false,\n        highlightedIndex: -1,\n      }\n\n      break\n    case stateChangeTypes.MenuKeyDownCharacter:\n      {\n        const lowercasedKey = action.key\n        const inputValue = `${state.inputValue}${lowercasedKey}`\n        const highlightedIndex = getItemIndexByCharacterKey(\n          inputValue,\n          state.highlightedIndex,\n          props.items,\n          props.itemToString,\n          action.getItemNodeFromIndex,\n        )\n\n        changes = {\n          inputValue,\n          ...(highlightedIndex >= 0 && {\n            highlightedIndex,\n          }),\n        }\n      }\n      break\n    case stateChangeTypes.MenuKeyDownArrowDown:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(\n          shiftKey ? 5 : 1,\n          state.highlightedIndex,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          props.circularNavigation,\n        ),\n      }\n\n      break\n    case stateChangeTypes.MenuKeyDownArrowUp:\n      changes = {\n        highlightedIndex: getNextWrappingIndex(\n          shiftKey ? -5 : -1,\n          state.highlightedIndex,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          props.circularNavigation,\n        ),\n      }\n\n      break\n    case stateChangeTypes.MenuMouseLeave:\n      changes = {\n        highlightedIndex: -1,\n      }\n\n      break\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen,\n        highlightedIndex: state.isOpen\n          ? -1\n          : getHighlightedIndexOnOpen(props, state, 0),\n      }\n\n      break\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getHighlightedIndexOnOpen(props, state, 0),\n      }\n\n      break\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false,\n      }\n\n      break\n    case stateChangeTypes.FunctionSetHighlightedIndex:\n      changes = {\n        highlightedIndex: action.highlightedIndex,\n      }\n\n      break\n    case stateChangeTypes.FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n      }\n\n      break\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue,\n      }\n\n      break\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: getDefaultValue(props, 'selectedItem'),\n        inputValue: getDefaultValue(props, 'inputValue'),\n      }\n\n      break\n    default:\n      throw new Error('Reducer called without proper action type.')\n  }\n\n  return {\n    ...state,\n    ...changes,\n  }\n}\n/* eslint-enable complexity */\n","/* eslint-disable max-statements */\nimport {useRef, useEffect, useCallback, useMemo} from 'react'\nimport {\n  getElementIds,\n  getItemIndex,\n  getPropTypesValidator,\n  isAcceptedCharacterKey,\n  useControlledReducer,\n  getInitialState,\n  updateA11yStatus,\n  useMouseAndTouchTracker,\n  useGetterPropsCalledChecker,\n  useLatestRef,\n  isDropdownsStateEqual\n} from '../utils'\nimport {\n  callAllEventHandlers,\n  handleRefs,\n  debounce,\n  normalizeArrowKey,\n  validateControlledUnchanged,\n} from '../../utils'\nimport downshiftSelectReducer from './reducer'\nimport {propTypes, defaultProps} from './utils'\nimport * as stateChangeTypes from './stateChangeTypes'\n\nconst validatePropTypes =\n  process.env.NODE_ENV === 'production'\n    ? /* istanbul ignore next */ null\n    : getPropTypesValidator(useSelect, propTypes)\n\nuseSelect.stateChangeTypes = stateChangeTypes\n\nfunction useSelect(userProps = {}) {\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    validatePropTypes(userProps)\n  }\n  // Props defaults and destructuring.\n  const props = {\n    ...defaultProps,\n    ...userProps,\n  }\n  const {\n    items,\n    scrollIntoView,\n    environment,\n    initialIsOpen,\n    defaultIsOpen,\n    itemToString,\n    getA11ySelectionMessage,\n    getA11yStatusMessage,\n  } = props\n  // Initial state depending on controlled props.\n  const initialState = getInitialState(props)\n  const [state, dispatch] = useControlledReducer(\n    downshiftSelectReducer,\n    initialState,\n    props,\n    isDropdownsStateEqual\n  )\n  const {isOpen, highlightedIndex, selectedItem, inputValue} = state\n\n  // Element efs.\n  const toggleButtonRef = useRef(null)\n  const menuRef = useRef(null)\n  const itemRefs = useRef()\n  itemRefs.current = {}\n  // used not to scroll when highlight by mouse.\n  const shouldScrollRef = useRef(true)\n  // used not to trigger menu blur action in some scenarios.\n  const shouldBlurRef = useRef(true)\n  // used to keep the inputValue clearTimeout object between renders.\n  const clearTimeoutRef = useRef(null)\n  // prevent id re-generation between renders.\n  const elementIdsRef = useRef(getElementIds(props))\n  // used to keep track of how many items we had on previous cycle.\n  const previousResultCountRef = useRef()\n  const isInitialMountRef = useRef(true)\n  // used for checking when props are moving from controlled to uncontrolled.\n  const prevPropsRef = useRef(props)\n  // utility callback to get item element.\n  const latest = useLatestRef({\n    state,\n    props,\n  })\n\n  // Some utils.\n  const getItemNodeFromIndex = index =>\n    itemRefs.current[elementIdsRef.current.getItemId(index)]\n\n  // Effects.\n  // Sets a11y status message on changes in state.\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return\n    }\n\n    const previousResultCount = previousResultCountRef.current\n\n    updateA11yStatus(\n      () =>\n        getA11yStatusMessage({\n          isOpen,\n          highlightedIndex,\n          selectedItem,\n          inputValue,\n          highlightedItem: items[highlightedIndex],\n          resultCount: items.length,\n          itemToString,\n          previousResultCount,\n        }),\n      environment.document,\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen, highlightedIndex, inputValue, items])\n  // Sets a11y status message on changes in selectedItem.\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return\n    }\n\n    const previousResultCount = previousResultCountRef.current\n\n    updateA11yStatus(\n      () =>\n        getA11ySelectionMessage({\n          isOpen,\n          highlightedIndex,\n          selectedItem,\n          inputValue,\n          highlightedItem: items[highlightedIndex],\n          resultCount: items.length,\n          itemToString,\n          previousResultCount,\n        }),\n      environment.document,\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedItem])\n  // Sets cleanup for the keysSoFar after 500ms.\n  useEffect(() => {\n    // init the clean function here as we need access to dispatch.\n    if (isInitialMountRef.current) {\n      clearTimeoutRef.current = debounce(outerDispatch => {\n        outerDispatch({\n          type: stateChangeTypes.FunctionSetInputValue,\n          inputValue: '',\n        })\n      }, 500)\n    }\n\n    if (!inputValue) {\n      return\n    }\n    clearTimeoutRef.current(dispatch)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [inputValue])\n  /* Controls the focus on the menu or the toggle button. */\n  useEffect(() => {\n    // Don't focus menu on first render.\n    if (isInitialMountRef.current) {\n      // Unless it was initialised as open.\n      if ((initialIsOpen || defaultIsOpen || isOpen) && menuRef.current) {\n        menuRef.current.focus()\n      }\n      return\n    }\n    // Focus menu on open.\n    if (isOpen) {\n      // istanbul ignore else\n      if (menuRef.current) {\n        menuRef.current.focus()\n      }\n      return\n    }\n    // Focus toggleButton on close, but not if it was closed with (Shift+)Tab.\n    if (environment.document.activeElement === menuRef.current) {\n      // istanbul ignore else\n      if (toggleButtonRef.current) {\n        shouldBlurRef.current = false\n        toggleButtonRef.current.focus()\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen])\n  // Scroll on highlighted item if change comes from keyboard.\n  useEffect(() => {\n    if (\n      highlightedIndex < 0 ||\n      !isOpen ||\n      !Object.keys(itemRefs.current).length\n    ) {\n      return\n    }\n    if (shouldScrollRef.current === false) {\n      shouldScrollRef.current = true\n    } else {\n      scrollIntoView(getItemNodeFromIndex(highlightedIndex), menuRef.current)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [highlightedIndex])\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return\n    }\n\n    previousResultCountRef.current = items.length\n  })\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return\n    }\n\n    validateControlledUnchanged(state, prevPropsRef.current, props)\n    prevPropsRef.current = props\n  }, [state, props])\n  // Add mouse/touch events to document.\n  const mouseAndTouchTrackersRef = useMouseAndTouchTracker(\n    isOpen,\n    [menuRef, toggleButtonRef],\n    environment,\n    () => {\n      dispatch({\n        type: stateChangeTypes.MenuBlur,\n      })\n    },\n  )\n  const setGetterPropCallInfo = useGetterPropsCalledChecker(\n    'getMenuProps',\n    'getToggleButtonProps',\n  )\n  // Make initial ref false.\n  useEffect(() => {\n    isInitialMountRef.current = false\n  }, [])\n\n  // Event handler functions.\n  const toggleButtonKeyDownHandlers = useMemo(\n    () => ({\n      ArrowDown(event) {\n        event.preventDefault()\n\n        dispatch({\n          type: stateChangeTypes.ToggleButtonKeyDownArrowDown,\n          getItemNodeFromIndex,\n          shiftKey: event.shiftKey,\n        })\n      },\n      ArrowUp(event) {\n        event.preventDefault()\n\n        dispatch({\n          type: stateChangeTypes.ToggleButtonKeyDownArrowUp,\n          getItemNodeFromIndex,\n          shiftKey: event.shiftKey,\n        })\n      },\n    }),\n    [dispatch],\n  )\n  const menuKeyDownHandlers = useMemo(\n    () => ({\n      ArrowDown(event) {\n        event.preventDefault()\n\n        dispatch({\n          type: stateChangeTypes.MenuKeyDownArrowDown,\n          getItemNodeFromIndex,\n          shiftKey: event.shiftKey,\n        })\n      },\n      ArrowUp(event) {\n        event.preventDefault()\n\n        dispatch({\n          type: stateChangeTypes.MenuKeyDownArrowUp,\n          getItemNodeFromIndex,\n          shiftKey: event.shiftKey,\n        })\n      },\n      Home(event) {\n        event.preventDefault()\n\n        dispatch({\n          type: stateChangeTypes.MenuKeyDownHome,\n          getItemNodeFromIndex,\n        })\n      },\n      End(event) {\n        event.preventDefault()\n\n        dispatch({\n          type: stateChangeTypes.MenuKeyDownEnd,\n          getItemNodeFromIndex,\n        })\n      },\n      Escape() {\n        dispatch({\n          type: stateChangeTypes.MenuKeyDownEscape,\n        })\n      },\n      Enter(event) {\n        event.preventDefault()\n\n        dispatch({\n          type: stateChangeTypes.MenuKeyDownEnter,\n        })\n      },\n      ' '(event) {\n        event.preventDefault()\n\n        dispatch({\n          type: stateChangeTypes.MenuKeyDownSpaceButton,\n        })\n      },\n    }),\n    [dispatch],\n  )\n\n  // Action functions.\n  const toggleMenu = useCallback(() => {\n    dispatch({\n      type: stateChangeTypes.FunctionToggleMenu,\n    })\n  }, [dispatch])\n  const closeMenu = useCallback(() => {\n    dispatch({\n      type: stateChangeTypes.FunctionCloseMenu,\n    })\n  }, [dispatch])\n  const openMenu = useCallback(() => {\n    dispatch({\n      type: stateChangeTypes.FunctionOpenMenu,\n    })\n  }, [dispatch])\n  const setHighlightedIndex = useCallback(\n    newHighlightedIndex => {\n      dispatch({\n        type: stateChangeTypes.FunctionSetHighlightedIndex,\n        highlightedIndex: newHighlightedIndex,\n      })\n    },\n    [dispatch],\n  )\n  const selectItem = useCallback(\n    newSelectedItem => {\n      dispatch({\n        type: stateChangeTypes.FunctionSelectItem,\n        selectedItem: newSelectedItem,\n      })\n    },\n    [dispatch],\n  )\n  const reset = useCallback(() => {\n    dispatch({\n      type: stateChangeTypes.FunctionReset,\n    })\n  }, [dispatch])\n  const setInputValue = useCallback(\n    newInputValue => {\n      dispatch({\n        type: stateChangeTypes.FunctionSetInputValue,\n        inputValue: newInputValue,\n      })\n    },\n    [dispatch],\n  )\n  // Getter functions.\n  const getLabelProps = useCallback(\n    labelProps => ({\n      id: elementIdsRef.current.labelId,\n      htmlFor: elementIdsRef.current.toggleButtonId,\n      ...labelProps,\n    }),\n    [],\n  )\n  const getMenuProps = useCallback(\n    (\n      {onMouseLeave, refKey = 'ref', onKeyDown, onBlur, ref, ...rest} = {},\n      {suppressRefError = false} = {},\n    ) => {\n      const latestState = latest.current.state\n      const menuHandleKeyDown = event => {\n        const key = normalizeArrowKey(event)\n        if (key && menuKeyDownHandlers[key]) {\n          menuKeyDownHandlers[key](event)\n        } else if (isAcceptedCharacterKey(key)) {\n          dispatch({\n            type: stateChangeTypes.MenuKeyDownCharacter,\n            key,\n            getItemNodeFromIndex,\n          })\n        }\n      }\n      const menuHandleBlur = () => {\n        // if the blur was a result of selection, we don't trigger this action.\n        if (shouldBlurRef.current === false) {\n          shouldBlurRef.current = true\n          return\n        }\n\n        const shouldBlur = !mouseAndTouchTrackersRef.current.isMouseDown\n        /* istanbul ignore else */\n        if (shouldBlur) {\n          dispatch({type: stateChangeTypes.MenuBlur})\n        }\n      }\n      const menuHandleMouseLeave = () => {\n        dispatch({\n          type: stateChangeTypes.MenuMouseLeave,\n        })\n      }\n\n      setGetterPropCallInfo('getMenuProps', suppressRefError, refKey, menuRef)\n\n      return {\n        [refKey]: handleRefs(ref, menuNode => {\n          menuRef.current = menuNode\n        }),\n        id: elementIdsRef.current.menuId,\n        role: 'listbox',\n        'aria-labelledby': elementIdsRef.current.labelId,\n        tabIndex: -1,\n        ...(latestState.isOpen &&\n          latestState.highlightedIndex > -1 && {\n            'aria-activedescendant': elementIdsRef.current.getItemId(\n              latestState.highlightedIndex,\n            ),\n          }),\n        onMouseLeave: callAllEventHandlers(onMouseLeave, menuHandleMouseLeave),\n        onKeyDown: callAllEventHandlers(onKeyDown, menuHandleKeyDown),\n        onBlur: callAllEventHandlers(onBlur, menuHandleBlur),\n        ...rest,\n      }\n    },\n    [dispatch, latest, menuKeyDownHandlers, mouseAndTouchTrackersRef, setGetterPropCallInfo],\n  )\n  const getToggleButtonProps = useCallback(\n    (\n      {onClick, onKeyDown, refKey = 'ref', ref, ...rest} = {},\n      {suppressRefError = false} = {},\n    ) => {\n      const toggleButtonHandleClick = () => {\n        dispatch({\n          type: stateChangeTypes.ToggleButtonClick,\n        })\n      }\n      const toggleButtonHandleKeyDown = event => {\n        const key = normalizeArrowKey(event)\n        if (key && toggleButtonKeyDownHandlers[key]) {\n          toggleButtonKeyDownHandlers[key](event)\n        } else if (isAcceptedCharacterKey(key)) {\n          dispatch({\n            type: stateChangeTypes.ToggleButtonKeyDownCharacter,\n            key,\n            getItemNodeFromIndex,\n          })\n        }\n      }\n      const toggleProps = {\n        [refKey]: handleRefs(ref, toggleButtonNode => {\n          toggleButtonRef.current = toggleButtonNode\n        }),\n        id: elementIdsRef.current.toggleButtonId,\n        'aria-haspopup': 'listbox',\n        'aria-expanded': latest.current.state.isOpen,\n        'aria-labelledby': `${elementIdsRef.current.labelId} ${elementIdsRef.current.toggleButtonId}`,\n        ...rest,\n      }\n\n      if (!rest.disabled) {\n        toggleProps.onClick = callAllEventHandlers(\n          onClick,\n          toggleButtonHandleClick,\n        )\n        toggleProps.onKeyDown = callAllEventHandlers(\n          onKeyDown,\n          toggleButtonHandleKeyDown,\n        )\n      }\n\n      setGetterPropCallInfo(\n        'getToggleButtonProps',\n        suppressRefError,\n        refKey,\n        toggleButtonRef,\n      )\n\n      return toggleProps\n    },\n    [dispatch, latest, toggleButtonKeyDownHandlers, setGetterPropCallInfo],\n  )\n  const getItemProps = useCallback(\n    ({\n      item,\n      index,\n      onMouseMove,\n      onClick,\n      refKey = 'ref',\n      ref,\n      ...rest\n    } = {}) => {\n      const {state: latestState, props: latestProps} = latest.current\n      const itemHandleMouseMove = () => {\n        if (index === latestState.highlightedIndex) {\n          return\n        }\n        shouldScrollRef.current = false\n        dispatch({\n          type: stateChangeTypes.ItemMouseMove,\n          index,\n        })\n      }\n      const itemHandleClick = () => {\n        dispatch({\n          type: stateChangeTypes.ItemClick,\n          index,\n        })\n      }\n\n      const itemIndex = getItemIndex(index, item, latestProps.items)\n      if (itemIndex < 0) {\n        throw new Error('Pass either item or item index in getItemProps!')\n      }\n      const itemProps = {\n        role: 'option',\n        'aria-selected': `${itemIndex === latestState.highlightedIndex}`,\n        id: elementIdsRef.current.getItemId(itemIndex),\n        [refKey]: handleRefs(ref, itemNode => {\n          if (itemNode) {\n            itemRefs.current[\n              elementIdsRef.current.getItemId(itemIndex)\n            ] = itemNode\n          }\n        }),\n        ...rest,\n      }\n\n      if (!rest.disabled) {\n        itemProps.onMouseMove = callAllEventHandlers(\n          onMouseMove,\n          itemHandleMouseMove,\n        )\n        itemProps.onClick = callAllEventHandlers(onClick, itemHandleClick)\n      }\n\n      return itemProps\n    },\n    [dispatch, latest],\n  )\n\n  return {\n    // prop getters.\n    getToggleButtonProps,\n    getLabelProps,\n    getMenuProps,\n    getItemProps,\n    // actions.\n    toggleMenu,\n    openMenu,\n    closeMenu,\n    setHighlightedIndex,\n    selectItem,\n    reset,\n    setInputValue,\n    // state.\n    highlightedIndex,\n    isOpen,\n    selectedItem,\n    inputValue,\n  }\n}\n\nexport default useSelect\n","import productionEnum from '../../productionEnum.macro'\n\nexport const InputKeyDownArrowDown = productionEnum(\n  '__input_keydown_arrow_down__',\n)\nexport const InputKeyDownArrowUp = productionEnum('__input_keydown_arrow_up__')\nexport const InputKeyDownEscape = productionEnum('__input_keydown_escape__')\nexport const InputKeyDownHome = productionEnum('__input_keydown_home__')\nexport const InputKeyDownEnd = productionEnum('__input_keydown_end__')\nexport const InputKeyDownEnter = productionEnum('__input_keydown_enter__')\nexport const InputChange = productionEnum('__input_change__')\nexport const InputBlur = productionEnum('__input_blur__')\n\nexport const MenuMouseLeave = productionEnum('__menu_mouse_leave__')\n\nexport const ItemMouseMove = productionEnum('__item_mouse_move__')\nexport const ItemClick = productionEnum('__item_click__')\n\nexport const ToggleButtonClick = productionEnum('__togglebutton_click__')\n\nexport const FunctionToggleMenu = productionEnum('__function_toggle_menu__')\nexport const FunctionOpenMenu = productionEnum('__function_open_menu__')\nexport const FunctionCloseMenu = productionEnum('__function_close_menu__')\nexport const FunctionSetHighlightedIndex = productionEnum(\n  '__function_set_highlighted_index__',\n)\nexport const FunctionSelectItem = productionEnum('__function_select_item__')\nexport const FunctionSetInputValue = productionEnum(\n  '__function_set_input_value__',\n)\nexport const FunctionReset = productionEnum('__function_reset__')\nexport const ControlledPropUpdatedSelectedItem = productionEnum(\n  '__controlled_prop_updated_selected_item__',\n)\n","import {useRef} from 'react'\nimport PropTypes from 'prop-types'\nimport {\n  generateId,\n  getA11yStatusMessage,\n  isControlledProp,\n  getState,\n} from '../../utils'\nimport {\n  getElementIds as getElementIdsCommon,\n  defaultProps as defaultPropsCommon,\n  getInitialState as getInitialStateCommon,\n  useEnhancedReducer,\n} from '../utils'\nimport {ControlledPropUpdatedSelectedItem} from './stateChangeTypes'\n\nexport function getElementIds({id, inputId, ...rest}) {\n  const uniqueId = id === undefined ? `downshift-${generateId()}` : id\n\n  return {\n    inputId: inputId || `${uniqueId}-input`,\n    ...getElementIdsCommon({id, ...rest}),\n  }\n}\n\nexport function getInitialState(props) {\n  const initialState = getInitialStateCommon(props)\n  const {selectedItem} = initialState\n  let {inputValue} = initialState\n\n  if (\n    inputValue === '' &&\n    selectedItem &&\n    props.defaultInputValue === undefined &&\n    props.initialInputValue === undefined &&\n    props.inputValue === undefined\n  ) {\n    inputValue = props.itemToString(selectedItem)\n  }\n\n  return {\n    ...initialState,\n    inputValue,\n  }\n}\n\nexport const propTypes = {\n  items: PropTypes.array.isRequired,\n  itemToString: PropTypes.func,\n  getA11yStatusMessage: PropTypes.func,\n  getA11ySelectionMessage: PropTypes.func,\n  circularNavigation: PropTypes.bool,\n  highlightedIndex: PropTypes.number,\n  defaultHighlightedIndex: PropTypes.number,\n  initialHighlightedIndex: PropTypes.number,\n  isOpen: PropTypes.bool,\n  defaultIsOpen: PropTypes.bool,\n  initialIsOpen: PropTypes.bool,\n  selectedItem: PropTypes.any,\n  initialSelectedItem: PropTypes.any,\n  defaultSelectedItem: PropTypes.any,\n  inputValue: PropTypes.string,\n  defaultInputValue: PropTypes.string,\n  initialInputValue: PropTypes.string,\n  id: PropTypes.string,\n  labelId: PropTypes.string,\n  menuId: PropTypes.string,\n  getItemId: PropTypes.func,\n  inputId: PropTypes.string,\n  toggleButtonId: PropTypes.string,\n  stateReducer: PropTypes.func,\n  onSelectedItemChange: PropTypes.func,\n  onHighlightedIndexChange: PropTypes.func,\n  onStateChange: PropTypes.func,\n  onIsOpenChange: PropTypes.func,\n  onInputValueChange: PropTypes.func,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any,\n    }),\n  }),\n}\n\n/**\n * The useCombobox version of useControlledReducer, which also\n * checks if the controlled prop selectedItem changed between\n * renders. If so, it will also update inputValue with its\n * string equivalent. It uses the common useEnhancedReducer to\n * compute the rest of the state.\n *\n * @param {Function} reducer Reducer function from downshift.\n * @param {Object} initialState Initial state of the hook.\n * @param {Object} props The hook props.\n * @returns {Array} An array with the state and an action dispatcher.\n */\nexport function useControlledReducer(reducer, initialState, props) {\n  const previousSelectedItemRef = useRef()\n  const [state, dispatch] = useEnhancedReducer(reducer, initialState, props)\n\n  // ToDo: if needed, make same approach as selectedItemChanged from Downshift.\n  if (isControlledProp(props, 'selectedItem')) {\n    if (previousSelectedItemRef.current !== props.selectedItem) {\n      dispatch({\n        type: ControlledPropUpdatedSelectedItem,\n        inputValue: props.itemToString(props.selectedItem),\n      })\n    }\n\n    previousSelectedItemRef.current =\n      state.selectedItem === previousSelectedItemRef.current\n        ? props.selectedItem\n        : state.selectedItem\n  }\n\n  return [getState(state, props), dispatch]\n}\n\nexport const defaultProps = {\n  ...defaultPropsCommon,\n  getA11yStatusMessage,\n  circularNavigation: true,\n}\n","import {getHighlightedIndexOnOpen, getDefaultValue} from '../utils'\nimport {getNextWrappingIndex, getNextNonDisabledIndex} from '../../utils'\nimport * as stateChangeTypes from './stateChangeTypes'\n\n/* eslint-disable complexity */\nexport default function downshiftUseComboboxReducer(state, action) {\n  const {type, props, shiftKey} = action\n  let changes\n\n  switch (type) {\n    case stateChangeTypes.ItemMouseMove:\n      changes = {\n        highlightedIndex: action.index,\n      }\n      break\n    case stateChangeTypes.ItemClick:\n      changes = {\n        isOpen: getDefaultValue(props, 'isOpen'),\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        selectedItem: props.items[action.index],\n        inputValue: props.itemToString(props.items[action.index]),\n      }\n      break\n    case stateChangeTypes.InputKeyDownArrowDown:\n      if (state.isOpen) {\n        changes = {\n          highlightedIndex: getNextWrappingIndex(\n            shiftKey ? 5 : 1,\n            state.highlightedIndex,\n            props.items.length,\n            action.getItemNodeFromIndex,\n            props.circularNavigation,\n          ),\n        }\n      } else {\n        changes = {\n          highlightedIndex: getHighlightedIndexOnOpen(\n            props,\n            state,\n            1,\n            action.getItemNodeFromIndex,\n          ),\n          isOpen: true,\n        }\n      }\n      break\n    case stateChangeTypes.InputKeyDownArrowUp:\n      if (state.isOpen) {\n        changes = {\n          highlightedIndex: getNextWrappingIndex(\n            shiftKey ? -5 : -1,\n            state.highlightedIndex,\n            props.items.length,\n            action.getItemNodeFromIndex,\n            props.circularNavigation,\n          ),\n        }\n      } else {\n        changes = {\n          highlightedIndex: getHighlightedIndexOnOpen(\n            props,\n            state,\n            -1,\n            action.getItemNodeFromIndex,\n          ),\n          isOpen: true,\n        }\n      }\n      break\n    case stateChangeTypes.InputKeyDownEnter:\n      changes = {\n        ...(state.highlightedIndex >= 0 && {\n          selectedItem: props.items[state.highlightedIndex],\n          isOpen: getDefaultValue(props, 'isOpen'),\n          highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n          inputValue: props.itemToString(props.items[state.highlightedIndex]),\n        }),\n      }\n      break\n    case stateChangeTypes.InputKeyDownEscape:\n      changes = {\n        isOpen: false,\n        selectedItem: null,\n        highlightedIndex: -1,\n        inputValue: '',\n      }\n      break\n    case stateChangeTypes.InputKeyDownHome:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(\n          1,\n          0,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          false,\n        ),\n      }\n      break\n    case stateChangeTypes.InputKeyDownEnd:\n      changes = {\n        highlightedIndex: getNextNonDisabledIndex(\n          -1,\n          props.items.length - 1,\n          props.items.length,\n          action.getItemNodeFromIndex,\n          false,\n        ),\n      }\n      break\n    case stateChangeTypes.InputBlur:\n      changes = {\n        isOpen: false,\n        ...(state.highlightedIndex >= 0 && {\n          selectedItem: props.items[state.highlightedIndex],\n          inputValue: props.itemToString(props.items[state.highlightedIndex]),\n          highlightedIndex: -1,\n        }),\n      }\n      break\n    case stateChangeTypes.InputChange:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        inputValue: action.inputValue,\n      }\n      break\n    case stateChangeTypes.MenuMouseLeave:\n      changes = {\n        highlightedIndex: -1,\n      }\n      break\n    case stateChangeTypes.ToggleButtonClick:\n    case stateChangeTypes.FunctionToggleMenu:\n      changes = {\n        isOpen: !state.isOpen,\n        highlightedIndex: state.isOpen\n          ? -1\n          : getHighlightedIndexOnOpen(props, state, 0),\n      }\n      break\n    case stateChangeTypes.FunctionOpenMenu:\n      changes = {\n        isOpen: true,\n        highlightedIndex: getHighlightedIndexOnOpen(props, state, 0),\n      }\n      break\n    case stateChangeTypes.FunctionCloseMenu:\n      changes = {\n        isOpen: false,\n      }\n      break\n    case stateChangeTypes.FunctionSetHighlightedIndex:\n      changes = {\n        highlightedIndex: action.highlightedIndex,\n      }\n      break\n    case stateChangeTypes.FunctionSelectItem:\n      changes = {\n        selectedItem: action.selectedItem,\n        inputValue: props.itemToString(action.selectedItem)\n      }\n      break\n    case stateChangeTypes.ControlledPropUpdatedSelectedItem:\n    case stateChangeTypes.FunctionSetInputValue:\n      changes = {\n        inputValue: action.inputValue,\n      }\n      break\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        highlightedIndex: getDefaultValue(props, 'highlightedIndex'),\n        isOpen: getDefaultValue(props, 'isOpen'),\n        selectedItem: getDefaultValue(props, 'selectedItem'),\n        inputValue: getDefaultValue(props, 'inputValue'),\n      }\n      break\n    default:\n      throw new Error('Reducer called without proper action type.')\n  }\n\n  return {\n    ...state,\n    ...changes,\n  }\n}\n/* eslint-enable complexity */\n","/* eslint-disable max-statements */\nimport {useRef, useEffect, useCallback, useMemo} from 'react'\nimport {isPreact, isReactNative} from '../../is.macro'\nimport {\n  handleRefs,\n  normalizeArrowKey,\n  callAllEventHandlers,\n  validateControlledUnchanged,\n} from '../../utils'\nimport {\n  getItemIndex,\n  getPropTypesValidator,\n  updateA11yStatus,\n  useMouseAndTouchTracker,\n  useGetterPropsCalledChecker,\n  useLatestRef,\n} from '../utils'\nimport {\n  getInitialState,\n  propTypes,\n  defaultProps,\n  getElementIds,\n  useControlledReducer,\n} from './utils'\nimport downshiftUseComboboxReducer from './reducer'\nimport * as stateChangeTypes from './stateChangeTypes'\n\nconst validatePropTypes =\n  process.env.NODE_ENV === 'production'\n    ? /* istanbul ignore next */ null\n    : getPropTypesValidator(useCombobox, propTypes)\n\nuseCombobox.stateChangeTypes = stateChangeTypes\n\nfunction useCombobox(userProps = {}) {\n  /* istanbul ignore else */\n  if (process.env.NODE_ENV !== 'production') {\n    validatePropTypes(userProps)\n  }\n  // Props defaults and destructuring.\n  const props = {\n    ...defaultProps,\n    ...userProps,\n  }\n  const {\n    initialIsOpen,\n    defaultIsOpen,\n    items,\n    scrollIntoView,\n    environment,\n    getA11yStatusMessage,\n    getA11ySelectionMessage,\n    itemToString,\n  } = props\n  // Initial state depending on controlled props.\n  const initialState = getInitialState(props)\n  const [state, dispatch] = useControlledReducer(\n    downshiftUseComboboxReducer,\n    initialState,\n    props,\n  )\n  const {isOpen, highlightedIndex, selectedItem, inputValue} = state\n\n  // Element refs.\n  const menuRef = useRef(null)\n  const itemRefs = useRef()\n  const inputRef = useRef(null)\n  const toggleButtonRef = useRef(null)\n  const comboboxRef = useRef(null)\n  itemRefs.current = {}\n  // used not to scroll on highlight by mouse.\n  const shouldScrollRef = useRef(true)\n  const isInitialMountRef = useRef(true)\n  // prevent id re-generation between renders.\n  const elementIdsRef = useRef(getElementIds(props))\n  // used to keep track of how many items we had on previous cycle.\n  const previousResultCountRef = useRef()\n  // used for checking when props are moving from controlled to uncontrolled.\n  const prevPropsRef = useRef(props)\n  // used to store information about getter props being called on render.\n  // utility callback to get item element.\n  const latest = useLatestRef({state, props})\n\n  const getItemNodeFromIndex = index =>\n    itemRefs.current[elementIdsRef.current.getItemId(index)]\n\n  // Effects.\n  // Sets a11y status message on changes in state.\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return\n    }\n\n    const previousResultCount = previousResultCountRef.current\n\n    updateA11yStatus(\n      () =>\n        getA11yStatusMessage({\n          isOpen,\n          highlightedIndex,\n          selectedItem,\n          inputValue,\n          highlightedItem: items[highlightedIndex],\n          resultCount: items.length,\n          itemToString,\n          previousResultCount,\n        }),\n      environment.document,\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen, highlightedIndex, inputValue, items])\n  // Sets a11y status message on changes in selectedItem.\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return\n    }\n\n    const previousResultCount = previousResultCountRef.current\n\n    updateA11yStatus(\n      () =>\n        getA11ySelectionMessage({\n          isOpen,\n          highlightedIndex,\n          selectedItem,\n          inputValue,\n          highlightedItem: items[highlightedIndex],\n          resultCount: items.length,\n          itemToString,\n          previousResultCount,\n        }),\n      environment.document,\n    )\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedItem])\n  // Scroll on highlighted item if change comes from keyboard.\n  useEffect(() => {\n    if (\n      highlightedIndex < 0 ||\n      !isOpen ||\n      !Object.keys(itemRefs.current).length\n    ) {\n      return\n    }\n\n    if (shouldScrollRef.current === false) {\n      shouldScrollRef.current = true\n    } else {\n      scrollIntoView(getItemNodeFromIndex(highlightedIndex), menuRef.current)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [highlightedIndex])\n  // Controls the focus on the menu or the toggle button.\n  useEffect(() => {\n    // Don't focus menu on first render.\n    if (isInitialMountRef.current) {\n      // Unless it was initialised as open.\n      if (initialIsOpen || defaultIsOpen || isOpen) {\n        if (inputRef.current) {\n          inputRef.current.focus()\n        }\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isOpen])\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return\n    }\n\n    previousResultCountRef.current = items.length\n  })\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return\n    }\n\n    validateControlledUnchanged(state, prevPropsRef.current, props)\n    prevPropsRef.current = props\n  }, [state, props])\n  // Add mouse/touch events to document.\n  const mouseAndTouchTrackersRef = useMouseAndTouchTracker(\n    isOpen,\n    [comboboxRef, menuRef, toggleButtonRef],\n    environment,\n    () => {\n      dispatch({\n        type: stateChangeTypes.InputBlur,\n      })\n    },\n  )\n  const setGetterPropCallInfo = useGetterPropsCalledChecker(\n    'getInputProps',\n    'getComboboxProps',\n    'getMenuProps',\n  )\n  // Make initial ref false.\n  useEffect(() => {\n    isInitialMountRef.current = false\n  }, [])\n\n  /* Event handler functions */\n  const inputKeyDownHandlers = useMemo(\n    () => ({\n      ArrowDown(event) {\n        event.preventDefault()\n        dispatch({\n          type: stateChangeTypes.InputKeyDownArrowDown,\n          shiftKey: event.shiftKey,\n          getItemNodeFromIndex,\n        })\n      },\n      ArrowUp(event) {\n        event.preventDefault()\n        dispatch({\n          type: stateChangeTypes.InputKeyDownArrowUp,\n          shiftKey: event.shiftKey,\n          getItemNodeFromIndex,\n        })\n      },\n      Home(event) {\n        event.preventDefault()\n        dispatch({\n          type: stateChangeTypes.InputKeyDownHome,\n          getItemNodeFromIndex,\n        })\n      },\n      End(event) {\n        event.preventDefault()\n        dispatch({\n          type: stateChangeTypes.InputKeyDownEnd,\n          getItemNodeFromIndex,\n        })\n      },\n      Escape() {\n        dispatch({\n          type: stateChangeTypes.InputKeyDownEscape,\n        })\n      },\n      Enter(event) {\n        // if IME composing, wait for next Enter keydown event.\n        if (event.which === 229) {\n          return\n        }\n        const latestState = latest.current.state\n\n        if (latestState.isOpen && latestState.highlightedIndex > -1) {\n          event.preventDefault()\n          dispatch({\n            type: stateChangeTypes.InputKeyDownEnter,\n            getItemNodeFromIndex,\n          })\n        }\n      },\n    }),\n    [dispatch, latest],\n  )\n\n  // Getter props.\n  const getLabelProps = useCallback(\n    labelProps => ({\n      id: elementIdsRef.current.labelId,\n      htmlFor: elementIdsRef.current.inputId,\n      ...labelProps,\n    }),\n    [],\n  )\n  const getMenuProps = useCallback(\n    (\n      {onMouseLeave, refKey = 'ref', ref, ...rest} = {},\n      {suppressRefError = false} = {},\n    ) => {\n      setGetterPropCallInfo('getMenuProps', suppressRefError, refKey, menuRef)\n      return {\n        [refKey]: handleRefs(ref, menuNode => {\n          menuRef.current = menuNode\n        }),\n        id: elementIdsRef.current.menuId,\n        role: 'listbox',\n        'aria-labelledby': elementIdsRef.current.labelId,\n        onMouseLeave: callAllEventHandlers(onMouseLeave, () => {\n          dispatch({\n            type: stateChangeTypes.MenuMouseLeave,\n          })\n        }),\n        ...rest,\n      }\n    },\n    [dispatch, setGetterPropCallInfo],\n  )\n\n  const getItemProps = useCallback(\n    ({\n      item,\n      index,\n      refKey = 'ref',\n      ref,\n      onMouseMove,\n      onClick,\n      onPress,\n      ...rest\n    } = {}) => {\n      const {props: latestProps, state: latestState} = latest.current\n      const itemIndex = getItemIndex(index, item, latestProps.items)\n      if (itemIndex < 0) {\n        throw new Error('Pass either item or item index in getItemProps!')\n      }\n\n      const onSelectKey = isReactNative\n        ? /* istanbul ignore next (react-native) */ 'onPress'\n        : 'onClick'\n      const customClickHandler = isReactNative\n        ? /* istanbul ignore next (react-native) */ onPress\n        : onClick\n\n      const itemHandleMouseMove = () => {\n        if (index === latestState.highlightedIndex) {\n          return\n        }\n        shouldScrollRef.current = false\n        dispatch({\n          type: stateChangeTypes.ItemMouseMove,\n          index,\n        })\n      }\n      const itemHandleClick = () => {\n        dispatch({\n          type: stateChangeTypes.ItemClick,\n          index,\n        })\n      }\n\n      return {\n        [refKey]: handleRefs(ref, itemNode => {\n          if (itemNode) {\n            itemRefs.current[\n              elementIdsRef.current.getItemId(itemIndex)\n            ] = itemNode\n          }\n        }),\n        role: 'option',\n        'aria-selected': `${itemIndex === latestState.highlightedIndex}`,\n        id: elementIdsRef.current.getItemId(itemIndex),\n        ...(!rest.disabled && {\n          onMouseMove: callAllEventHandlers(onMouseMove, itemHandleMouseMove),\n          [onSelectKey]: callAllEventHandlers(\n            customClickHandler,\n            itemHandleClick,\n          ),\n        }),\n        ...rest,\n      }\n    },\n    [dispatch, latest],\n  )\n\n  const getToggleButtonProps = useCallback(\n    ({onClick, onPress, refKey = 'ref', ref, ...rest} = {}) => {\n      const toggleButtonHandleClick = () => {\n        dispatch({\n          type: stateChangeTypes.ToggleButtonClick,\n        })\n\n        if (!latest.current.state.isOpen && inputRef.current) {\n          inputRef.current.focus()\n        }\n      }\n\n      return {\n        [refKey]: handleRefs(ref, toggleButtonNode => {\n          toggleButtonRef.current = toggleButtonNode\n        }),\n        id: elementIdsRef.current.toggleButtonId,\n        tabIndex: -1,\n        ...(!rest.disabled && {\n          ...(isReactNative\n            ? /* istanbul ignore next (react-native) */ {\n                onPress: callAllEventHandlers(onPress, toggleButtonHandleClick),\n              }\n            : {\n                onClick: callAllEventHandlers(onClick, toggleButtonHandleClick),\n              }),\n        }),\n        ...rest,\n      }\n    },\n    [dispatch, latest],\n  )\n  const getInputProps = useCallback(\n    (\n      {\n        onKeyDown,\n        onChange,\n        onInput,\n        onBlur,\n        onChangeText,\n        refKey = 'ref',\n        ref,\n        ...rest\n      } = {},\n      {suppressRefError = false} = {},\n    ) => {\n      setGetterPropCallInfo('getInputProps', suppressRefError, refKey, inputRef)\n\n      const latestState = latest.current.state\n      const inputHandleKeyDown = event => {\n        const key = normalizeArrowKey(event)\n        if (key && inputKeyDownHandlers[key]) {\n          inputKeyDownHandlers[key](event)\n        }\n      }\n      const inputHandleChange = event => {\n        dispatch({\n          type: stateChangeTypes.InputChange,\n          inputValue: isReactNative\n            ? /* istanbul ignore next (react-native) */ event.nativeEvent.text\n            : event.target.value,\n        })\n      }\n      const inputHandleBlur = () => {\n        /* istanbul ignore else */\n        if (!mouseAndTouchTrackersRef.current.isMouseDown) {\n          dispatch({\n            type: stateChangeTypes.InputBlur,\n          })\n        }\n      }\n\n      /* istanbul ignore next (preact) */\n      const onChangeKey = isPreact ? 'onInput' : 'onChange'\n      let eventHandlers = {}\n\n      if (!rest.disabled) {\n        eventHandlers = {\n          [onChangeKey]: callAllEventHandlers(\n            onChange,\n            onInput,\n            inputHandleChange,\n          ),\n          onKeyDown: callAllEventHandlers(onKeyDown, inputHandleKeyDown),\n          onBlur: callAllEventHandlers(onBlur, inputHandleBlur),\n        }\n      }\n\n      /* istanbul ignore if (react-native) */\n      if (isReactNative) {\n        eventHandlers.onChange = callAllEventHandlers(\n          onChange,\n          onInput,\n          inputHandleChange,\n        )\n        eventHandlers.onChangeText = callAllEventHandlers(\n          onChangeText,\n          onInput,\n          text => {\n            inputHandleChange({nativeEvent: {text}})\n          },\n        )\n      }\n\n      return {\n        [refKey]: handleRefs(ref, inputNode => {\n          inputRef.current = inputNode\n        }),\n        id: elementIdsRef.current.inputId,\n        'aria-autocomplete': 'list',\n        'aria-controls': elementIdsRef.current.menuId,\n        ...(latestState.isOpen &&\n          latestState.highlightedIndex > -1 && {\n            'aria-activedescendant': elementIdsRef.current.getItemId(\n              latestState.highlightedIndex,\n            ),\n          }),\n        'aria-labelledby': elementIdsRef.current.labelId,\n        // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\n        // revert back since autocomplete=\"nope\" is ignored on latest Chrome and Opera\n        autoComplete: 'off',\n        value: latestState.inputValue,\n        ...eventHandlers,\n        ...rest,\n      }\n    },\n    [\n      dispatch,\n      inputKeyDownHandlers,\n      latest,\n      mouseAndTouchTrackersRef,\n      setGetterPropCallInfo,\n    ],\n  )\n  const getComboboxProps = useCallback(\n    ({refKey = 'ref', ref, ...rest} = {}, {suppressRefError = false} = {}) => {\n      setGetterPropCallInfo(\n        'getComboboxProps',\n        suppressRefError,\n        refKey,\n        comboboxRef,\n      )\n\n      return {\n        [refKey]: handleRefs(ref, comboboxNode => {\n          comboboxRef.current = comboboxNode\n        }),\n        role: 'combobox',\n        'aria-haspopup': 'listbox',\n        'aria-owns': elementIdsRef.current.menuId,\n        'aria-expanded': latest.current.state.isOpen,\n        ...rest,\n      }\n    },\n    [latest, setGetterPropCallInfo],\n  )\n\n  // returns\n  const toggleMenu = useCallback(() => {\n    dispatch({\n      type: stateChangeTypes.FunctionToggleMenu,\n    })\n  }, [dispatch])\n  const closeMenu = useCallback(() => {\n    dispatch({\n      type: stateChangeTypes.FunctionCloseMenu,\n    })\n  }, [dispatch])\n  const openMenu = useCallback(() => {\n    dispatch({\n      type: stateChangeTypes.FunctionOpenMenu,\n    })\n  }, [dispatch])\n  const setHighlightedIndex = useCallback(\n    newHighlightedIndex => {\n      dispatch({\n        type: stateChangeTypes.FunctionSetHighlightedIndex,\n        highlightedIndex: newHighlightedIndex,\n      })\n    },\n    [dispatch],\n  )\n  const selectItem = useCallback(\n    newSelectedItem => {\n      dispatch({\n        type: stateChangeTypes.FunctionSelectItem,\n        selectedItem: newSelectedItem,\n      })\n    },\n    [dispatch],\n  )\n  const setInputValue = useCallback(\n    newInputValue => {\n      dispatch({\n        type: stateChangeTypes.FunctionSetInputValue,\n        inputValue: newInputValue,\n      })\n    },\n    [dispatch],\n  )\n  const reset = useCallback(() => {\n    dispatch({\n      type: stateChangeTypes.FunctionReset,\n    })\n  }, [dispatch])\n\n  return {\n    // prop getters.\n    getItemProps,\n    getLabelProps,\n    getMenuProps,\n    getInputProps,\n    getComboboxProps,\n    getToggleButtonProps,\n    // actions.\n    toggleMenu,\n    openMenu,\n    closeMenu,\n    setHighlightedIndex,\n    setInputValue,\n    selectItem,\n    reset,\n    // state.\n    highlightedIndex,\n    isOpen,\n    selectedItem,\n    inputValue,\n  }\n}\n\nexport default useCombobox\n","import PropTypes from 'prop-types'\nimport {\n  getInitialValue as getInitialValueCommon,\n  getDefaultValue as getDefaultValueCommon,\n  defaultProps as defaultPropsCommon,\n} from '../utils'\n\nconst defaultStateValues = {\n  activeIndex: -1,\n  selectedItems: [],\n}\n\n/**\n * Returns the initial value for a state key in the following order:\n * 1. controlled prop, 2. initial prop, 3. default prop, 4. default\n * value from Downshift.\n *\n * @param {Object} props Props passed to the hook.\n * @param {string} propKey Props key to generate the value for.\n * @returns {any} The initial value for that prop.\n */\nfunction getInitialValue(props, propKey) {\n  return getInitialValueCommon(props, propKey, defaultStateValues)\n}\n\n/**\n * Returns the default value for a state key in the following order:\n * 1. controlled prop, 2. default prop, 3. default value from Downshift.\n *\n * @param {Object} props Props passed to the hook.\n * @param {string} propKey Props key to generate the value for.\n * @returns {any} The initial value for that prop.\n */\nexport function getDefaultValue(props, propKey) {\n  return getDefaultValueCommon(props, propKey, defaultStateValues)\n}\n\n/**\n * Gets the initial state based on the provided props. It uses initial, default\n * and controlled props related to state in order to compute the initial value.\n *\n * @param {Object} props Props passed to the hook.\n * @returns {Object} The initial state.\n */\nexport function getInitialState(props) {\n  const activeIndex = getInitialValue(props, 'activeIndex')\n  const selectedItems = getInitialValue(props, 'selectedItems')\n\n  return {\n    activeIndex,\n    selectedItems,\n  }\n}\n\n/**\n * Returns true if dropdown keydown operation is permitted. Should not be\n * allowed on keydown with modifier keys (ctrl, alt, shift, meta), on\n * input element with text content that is either highlighted or selection\n * cursor is not at the starting position.\n *\n * @param {KeyboardEvent} event The event from keydown.\n * @returns {boolean} Whether the operation is allowed.\n */\nexport function isKeyDownOperationPermitted(event) {\n  if (event.shiftKey || event.metaKey || event.ctrlKey || event.altKey) {\n    return false\n  }\n\n  const element = event.target\n\n  if (\n    element instanceof HTMLInputElement && // if element is a text input\n    element.value !== '' && // and we have text in it\n    // and cursor is either not at the start or is currently highlighting text.\n    (element.selectionStart !== 0 || element.selectionEnd !== 0)\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Returns a message to be added to aria-live region when item is removed.\n *\n * @param {Object} selectionParameters Parameters required to build the message.\n * @returns {string} The a11y message.\n */\nfunction getA11yRemovalMessage(selectionParameters) {\n  const {\n    removedSelectedItem,\n    itemToString: itemToStringLocal,\n  } = selectionParameters\n\n  return `${itemToStringLocal(removedSelectedItem)} has been removed.`\n}\n\nexport const propTypes = {\n  selectedItems: PropTypes.array,\n  initialSelectedItems: PropTypes.array,\n  defaultSelectedItems: PropTypes.array,\n  itemToString: PropTypes.func,\n  getA11yRemovalMessage: PropTypes.func,\n  stateReducer: PropTypes.func,\n  activeIndex: PropTypes.number,\n  initialActiveIndex: PropTypes.number,\n  defaultActiveIndex: PropTypes.number,\n  onActiveIndexChange: PropTypes.func,\n  onSelectedItemsChange: PropTypes.func,\n  keyNavigationNext: PropTypes.string,\n  keyNavigationPrevious: PropTypes.string,\n  environment: PropTypes.shape({\n    addEventListener: PropTypes.func,\n    removeEventListener: PropTypes.func,\n    document: PropTypes.shape({\n      getElementById: PropTypes.func,\n      activeElement: PropTypes.any,\n      body: PropTypes.any,\n    }),\n  }),\n}\n\nexport const defaultProps = {\n  itemToString: defaultPropsCommon.itemToString,\n  stateReducer: defaultPropsCommon.stateReducer,\n  environment: defaultPropsCommon.environment,\n  getA11yRemovalMessage,\n  keyNavigationNext: 'ArrowRight',\n  keyNavigationPrevious: 'ArrowLeft',\n}\n","import productionEnum from '../../productionEnum.macro'\n\nexport const SelectedItemClick = productionEnum('__selected_item_click__')\nexport const SelectedItemKeyDownDelete = productionEnum(\n  '__selected_item_keydown_delete__',\n)\nexport const SelectedItemKeyDownBackspace = productionEnum(\n  '__selected_item_keydown_backspace__',\n)\nexport const SelectedItemKeyDownNavigationNext = productionEnum(\n  '__selected_item_keydown_navigation_next__',\n)\nexport const SelectedItemKeyDownNavigationPrevious = productionEnum(\n  '__selected_item_keydown_navigation_previous__',\n)\n\nexport const DropdownKeyDownNavigationPrevious = productionEnum(\n  '__dropdown_keydown_navigation_previous__',\n)\nexport const DropdownKeyDownBackspace = productionEnum(\n  '__dropdown_keydown_backspace__',\n)\nexport const DropdownClick = productionEnum('__dropdown_click__')\n\nexport const FunctionAddSelectedItem = productionEnum(\n  '__function_add_selected_item__',\n)\nexport const FunctionRemoveSelectedItem = productionEnum(\n  '__function_remove_selected_item__',\n)\nexport const FunctionSetSelectedItems = productionEnum(\n  '__function_set_selected_items__',\n)\nexport const FunctionSetActiveIndex = productionEnum(\n  '__function_set_active_index__',\n)\nexport const FunctionReset = productionEnum('__function_reset__')\n","import {getDefaultValue} from './utils'\nimport * as stateChangeTypes from './stateChangeTypes'\n\n/* eslint-disable complexity */\nexport default function downshiftMultipleSelectionReducer(state, action) {\n  const {type, index, props, selectedItem} = action\n  const {activeIndex, selectedItems} = state\n  let changes\n\n  switch (type) {\n    case stateChangeTypes.SelectedItemClick:\n      changes = {\n        activeIndex: index,\n      }\n\n      break\n    case stateChangeTypes.SelectedItemKeyDownNavigationPrevious:\n      changes = {\n        activeIndex: activeIndex - 1 < 0 ? 0 : activeIndex - 1,\n      }\n\n      break\n    case stateChangeTypes.SelectedItemKeyDownNavigationNext:\n      changes = {\n        activeIndex:\n          activeIndex + 1 >= selectedItems.length ? -1 : activeIndex + 1,\n      }\n\n      break\n    case stateChangeTypes.SelectedItemKeyDownBackspace:\n    case stateChangeTypes.SelectedItemKeyDownDelete: {\n      let newActiveIndex = activeIndex\n\n      if (selectedItems.length === 1) {\n        newActiveIndex = -1\n      } else if (activeIndex === selectedItems.length - 1) {\n        newActiveIndex = selectedItems.length - 2\n      }\n\n      changes = {\n        selectedItems: [\n          ...selectedItems.slice(0, activeIndex),\n          ...selectedItems.slice(activeIndex + 1),\n        ],\n        ...{activeIndex: newActiveIndex},\n      }\n\n      break\n    }\n    case stateChangeTypes.DropdownKeyDownNavigationPrevious:\n      changes = {\n        activeIndex: selectedItems.length - 1,\n      }\n      break\n    case stateChangeTypes.DropdownKeyDownBackspace:\n      changes = {\n        selectedItems: selectedItems.slice(0, selectedItems.length - 1),\n      }\n      break\n    case stateChangeTypes.FunctionAddSelectedItem:\n      changes = {\n        selectedItems: [...selectedItems, selectedItem],\n      }\n      break\n    case stateChangeTypes.DropdownClick:\n      changes = {\n        activeIndex: -1,\n      }\n      break\n    case stateChangeTypes.FunctionRemoveSelectedItem: {\n      let newActiveIndex = activeIndex\n      const selectedItemIndex = selectedItems.indexOf(selectedItem)\n\n      if (selectedItems.length === 1) {\n        newActiveIndex = -1\n      } else if (selectedItemIndex === selectedItems.length - 1) {\n        newActiveIndex = selectedItems.length - 2\n      }\n\n      changes = {\n        selectedItems: [\n          ...selectedItems.slice(0, selectedItemIndex),\n          ...selectedItems.slice(selectedItemIndex + 1),\n        ],\n        ...{activeIndex: newActiveIndex},\n      }\n      break\n    }\n    case stateChangeTypes.FunctionSetSelectedItems: {\n      const {selectedItems: newSelectedItems} = action\n      changes = {\n        selectedItems: newSelectedItems,\n      }\n      break\n    }\n    case stateChangeTypes.FunctionSetActiveIndex: {\n      const {activeIndex: newActiveIndex} = action\n      changes = {\n        activeIndex: newActiveIndex,\n      }\n      break\n    }\n    case stateChangeTypes.FunctionReset:\n      changes = {\n        activeIndex: getDefaultValue(props, 'activeIndex'),\n        selectedItems: getDefaultValue(props, 'selectedItems'),\n      }\n      break\n    default:\n      throw new Error('Reducer called without proper action type.')\n  }\n\n  return {\n    ...state,\n    ...changes,\n  }\n}\n","import {useRef, useEffect, useCallback, useMemo} from 'react'\nimport setStatus from '../../set-a11y-status'\nimport {\n  handleRefs,\n  callAllEventHandlers,\n  normalizeArrowKey,\n  validateControlledUnchanged,\n} from '../../utils'\nimport {\n  useControlledReducer,\n  getItemIndex,\n  useGetterPropsCalledChecker,\n  useLatestRef,\n} from '../utils'\nimport {\n  getInitialState,\n  defaultProps,\n  isKeyDownOperationPermitted,\n} from './utils'\nimport downshiftMultipleSelectionReducer from './reducer'\nimport * as stateChangeTypes from './stateChangeTypes'\n\nuseMultipleSelection.stateChangeTypes = stateChangeTypes\n\nfunction useMultipleSelection(userProps = {}) {\n  // Props defaults and destructuring.\n  const props = {\n    ...defaultProps,\n    ...userProps,\n  }\n  const {\n    getA11yRemovalMessage,\n    itemToString,\n    environment,\n    keyNavigationNext,\n    keyNavigationPrevious,\n  } = props\n\n  // Reducer init.\n  const [state, dispatch] = useControlledReducer(\n    downshiftMultipleSelectionReducer,\n    getInitialState(props),\n    props,\n  )\n  const {activeIndex, selectedItems} = state\n\n  // Refs.\n  const isInitialMountRef = useRef(true)\n  const dropdownRef = useRef(null)\n  const previousSelectedItemsRef = useRef(selectedItems)\n  const selectedItemRefs = useRef()\n  selectedItemRefs.current = []\n  // used for checking when props are moving from controlled to uncontrolled.\n  const prevPropsRef = useRef(props)\n  const latest = useLatestRef({state, props})\n\n  // Effects.\n  /* Sets a11y status message on changes in selectedItem. */\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return\n    }\n\n    if (selectedItems.length < previousSelectedItemsRef.current.length) {\n      const removedSelectedItem = previousSelectedItemsRef.current.find(\n        item => selectedItems.indexOf(item) < 0,\n      )\n\n      setStatus(\n        getA11yRemovalMessage({\n          itemToString,\n          resultCount: selectedItems.length,\n          removedSelectedItem,\n          activeIndex,\n          activeSelectedItem: selectedItems[activeIndex],\n        }),\n        environment.document,\n      )\n    }\n\n    previousSelectedItemsRef.current = selectedItems\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedItems.length])\n  // Sets focus on active item.\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return\n    }\n\n    if (activeIndex === -1 && dropdownRef.current) {\n      dropdownRef.current.focus()\n    } else if (selectedItemRefs.current[activeIndex]) {\n      selectedItemRefs.current[activeIndex].focus()\n    }\n  }, [activeIndex])\n  useEffect(() => {\n    if (isInitialMountRef.current) {\n      return\n    }\n\n    validateControlledUnchanged(state, prevPropsRef.current, props)\n    prevPropsRef.current = props\n  }, [state, props])\n  const setGetterPropCallInfo = useGetterPropsCalledChecker('getDropdownProps')\n  // Make initial ref false.\n  useEffect(() => {\n    isInitialMountRef.current = false\n  }, [])\n\n  // Event handler functions.\n  const selectedItemKeyDownHandlers = useMemo(\n    () => ({\n      [keyNavigationPrevious]() {\n        dispatch({\n          type: stateChangeTypes.SelectedItemKeyDownNavigationPrevious,\n        })\n      },\n      [keyNavigationNext]() {\n        dispatch({\n          type: stateChangeTypes.SelectedItemKeyDownNavigationNext,\n        })\n      },\n      Delete() {\n        dispatch({\n          type: stateChangeTypes.SelectedItemKeyDownDelete,\n        })\n      },\n      Backspace() {\n        dispatch({\n          type: stateChangeTypes.SelectedItemKeyDownBackspace,\n        })\n      },\n    }),\n    [dispatch, keyNavigationNext, keyNavigationPrevious],\n  )\n  const dropdownKeyDownHandlers = useMemo(\n    () => ({\n      [keyNavigationPrevious](event) {\n        if (isKeyDownOperationPermitted(event)) {\n          dispatch({\n            type: stateChangeTypes.DropdownKeyDownNavigationPrevious,\n          })\n        }\n      },\n      Backspace(event) {\n        if (isKeyDownOperationPermitted(event)) {\n          dispatch({\n            type: stateChangeTypes.DropdownKeyDownBackspace,\n          })\n        }\n      },\n    }),\n    [dispatch, keyNavigationPrevious],\n  )\n\n  // Getter props.\n  const getSelectedItemProps = useCallback(\n    ({\n      refKey = 'ref',\n      ref,\n      onClick,\n      onKeyDown,\n      selectedItem,\n      index,\n      ...rest\n    } = {}) => {\n      const {state: latestState} = latest.current\n      const itemIndex = getItemIndex(\n        index,\n        selectedItem,\n        latestState.selectedItems,\n      )\n      if (itemIndex < 0) {\n        throw new Error(\n          'Pass either selectedItem or index in getSelectedItemProps!',\n        )\n      }\n\n      const selectedItemHandleClick = () => {\n        dispatch({\n          type: stateChangeTypes.SelectedItemClick,\n          index,\n        })\n      }\n      const selectedItemHandleKeyDown = event => {\n        const key = normalizeArrowKey(event)\n        if (key && selectedItemKeyDownHandlers[key]) {\n          selectedItemKeyDownHandlers[key](event)\n        }\n      }\n\n      return {\n        [refKey]: handleRefs(ref, selectedItemNode => {\n          if (selectedItemNode) {\n            selectedItemRefs.current.push(selectedItemNode)\n          }\n        }),\n        tabIndex: index === latestState.activeIndex ? 0 : -1,\n        onClick: callAllEventHandlers(onClick, selectedItemHandleClick),\n        onKeyDown: callAllEventHandlers(onKeyDown, selectedItemHandleKeyDown),\n        ...rest,\n      }\n    },\n    [dispatch, latest, selectedItemKeyDownHandlers],\n  )\n  const getDropdownProps = useCallback(\n    (\n      {\n        refKey = 'ref',\n        ref,\n        onKeyDown,\n        onClick,\n        preventKeyAction = false,\n        ...rest\n      } = {},\n      {suppressRefError = false} = {},\n    ) => {\n      setGetterPropCallInfo(\n        'getDropdownProps',\n        suppressRefError,\n        refKey,\n        dropdownRef,\n      )\n\n      const dropdownHandleKeyDown = event => {\n        const key = normalizeArrowKey(event)\n        if (key && dropdownKeyDownHandlers[key]) {\n          dropdownKeyDownHandlers[key](event)\n        }\n      }\n      const dropdownHandleClick = () => {\n        dispatch({\n          type: stateChangeTypes.DropdownClick,\n        })\n      }\n\n      return {\n        [refKey]: handleRefs(ref, dropdownNode => {\n          if (dropdownNode) {\n            dropdownRef.current = dropdownNode\n          }\n        }),\n        ...(!preventKeyAction && {\n          onKeyDown: callAllEventHandlers(onKeyDown, dropdownHandleKeyDown),\n          onClick: callAllEventHandlers(onClick, dropdownHandleClick),\n        }),\n        ...rest,\n      }\n    },\n    [dispatch, dropdownKeyDownHandlers, setGetterPropCallInfo],\n  )\n\n  // returns\n  const addSelectedItem = useCallback(\n    selectedItem => {\n      dispatch({\n        type: stateChangeTypes.FunctionAddSelectedItem,\n        selectedItem,\n      })\n    },\n    [dispatch],\n  )\n  const removeSelectedItem = useCallback(\n    selectedItem => {\n      dispatch({\n        type: stateChangeTypes.FunctionRemoveSelectedItem,\n        selectedItem,\n      })\n    },\n    [dispatch],\n  )\n  const setSelectedItems = useCallback(\n    newSelectedItems => {\n      dispatch({\n        type: stateChangeTypes.FunctionSetSelectedItems,\n        selectedItems: newSelectedItems,\n      })\n    },\n    [dispatch],\n  )\n  const setActiveIndex = useCallback(\n    newActiveIndex => {\n      dispatch({\n        type: stateChangeTypes.FunctionSetActiveIndex,\n        activeIndex: newActiveIndex,\n      })\n    },\n    [dispatch],\n  )\n  const reset = useCallback(() => {\n    dispatch({\n      type: stateChangeTypes.FunctionReset,\n    })\n  }, [dispatch])\n\n  return {\n    getSelectedItemProps,\n    getDropdownProps,\n    addSelectedItem,\n    removeSelectedItem,\n    setSelectedItems,\n    setActiveIndex,\n    reset,\n    selectedItems,\n    activeIndex,\n  }\n}\n\nexport default useMultipleSelection\n"],"names":["_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","_extends","assign","bind","arguments","prototype","hasOwnProperty","call","apply","this","_assertThisInitialized","self","ReferenceError","_setPrototypeOf","o","p","setPrototypeOf","__proto__","b","Symbol","for","c","d","e","f","g","h","k","l","m","n","q","r","t","v","w","x","y","z","a","u","$$typeof","type","A","module","exports","require$$0","emptyFunction","emptyFunctionWithReset","resetWarningCache","shim","props","propName","componentName","location","propFullName","secret","err","Error","name","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","number","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes","PropTypes","require$$2","nodeType","clientHeight","scrollHeight","clientWidth","scrollWidth","getComputedStyle","overflowY","overflowX","ownerDocument","defaultView","frameElement","idCounter","cbToCb","cb","noop","scrollIntoView","menuNode","actions","window","scrollMode","block","inline","boundary","skipOverflowHiddenElements","s","TypeError","document","scrollingElement","documentElement","parentElement","getRootNode","host","push","body","visualViewport","width","innerWidth","height","innerHeight","W","scrollX","pageXOffset","H","scrollY","pageYOffset","getBoundingClientRect","E","M","top","V","right","bottom","I","left","C","R","T","B","D","O","X","Y","L","S","j","N","parseInt","borderLeftWidth","borderTopWidth","borderRightWidth","F","borderBottomWidth","G","J","K","offsetWidth","P","offsetHeight","Q","U","Math","max","Z","scrollLeft","$","scrollTop","min","el","computeScrollIntoView","forEach","_ref","isOrContainsNode","parent","child","contains","debounce","fn","time","timeoutId","cancel","clearTimeout","wrapper","_len","args","Array","_key","setTimeout","callAllEventHandlers","_len2","fns","_key2","event","_len3","_key3","some","concat","preventDownshiftDefault","nativeEvent","handleRefs","_len4","refs","_key4","ref","current","generateId","String","getA11yStatusMessage","_ref2","isOpen","resultCount","previousResultCount","unwrapArray","arg","defaultValue","isArray","stateKeys","pickState","state","result","getState","reduce","prevState","isControlledProp","undefined","normalizeArrowKey","keyCode","getNextWrappingIndex","moveAmount","baseIndex","itemCount","getItemNodeFromIndex","circular","itemsLastIndex","newIndex","nonDisabledNewIndex","getNextNonDisabledIndex","currentElementNode","hasAttribute","index","targetWithinDownshift","downshiftElements","checkActiveElement","contextNode","activeElement","cleanupStatus","getStatusDiv","textContent","setStatus","status","documentProp","div","statusDiv","getElementById","createElement","setAttribute","style","border","clip","margin","overflow","padding","position","appendChild","Downshift","_Component","subClass","superClass","_this","id","menuId","labelId","inputId","getItemId","input","items","timeoutIds","internalSetTimeout","filter","setItemCount","count","unsetItemCount","setHighlightedIndex","highlightedIndex","otherStateToSet","defaultHighlightedIndex","internalSetState","clearSelection","selectedItem","inputValue","defaultIsOpen","selectItem","item","itemToString","selectItemAtIndex","itemIndex","selectHighlightedItem","stateToSet","isItemSelected","onChangeArg","onStateChangeArg","isStateToSetFunction","onInputValueChange","getStateAndHelpers","setState","newStateToSet","stateReducer","nextState","onStateChange","onSelect","onChange","onUserAction","rootRef","_rootNode","getRootProps","_temp","_temp2","_extends2","_ref$refKey","refKey","rest","_excluded","_ref2$suppressRefErro","suppressRefError","called","role","keyDownHandlers","ArrowDown","_this2","preventDefault","amount","shiftKey","moveHighlightedIndex","getItemCount","nextHighlightedIndex","ArrowUp","_this3","Enter","which","_this$getState2","itemNode","Escape","reset","buttonKeyDownHandlers","toggleMenu","inputKeyDownHandlers","Home","_this4","newHighlightedIndex","End","_this5","getToggleButtonProps","_temp3","_ref3","onClick","onPress","onKeyDown","onKeyUp","onBlur","_excluded2","enabledEventHandlers","buttonHandleClick","buttonHandleKeyDown","buttonHandleKeyUp","buttonHandleBlur","disabled","environment","focus","blurTarget","isMouseDown","getLabelProps","htmlFor","getInputProps","_temp4","_ref4","onInput","onChangeText","_excluded3","eventHandlers","_eventHandlers","_this$getState6","inputHandleChange","inputHandleKeyDown","inputHandleBlur","autoComplete","value","downshiftButtonIsActive","dataset","toggle","menuRef","_menuNode","getMenuProps","_temp5","_temp6","_extends3","_ref5","_ref5$refKey","_excluded4","_ref6$suppressRefErro","getItemProps","_temp7","_enabledEventHandlers","_ref7","onMouseMove","onMouseDown","_ref7$item","_excluded5","customClickHandler","avoidScrolling","clearItems","_ref8","_ref9","_this$getState7","openMenu","closeMenu","updateStatus","highlightedItem","setA11yStatus","_this$props","_this$props$initialHi","initialHighlightedIndex","_this$props$initialIs","initialIsOpen","_this$props$initialIn","initialInputValue","_this$props$initialSe","initialSelectedItem","create","constructor","_proto","internalClearTimeouts","stateToMerge","scrollHighlightedItemIntoView","_this6","_this$getState9","componentDidMount","_this7","onMouseUp","onOuterClick","onTouchStart","isTouchMove","onTouchMove","onTouchEnd","contextWithinDownshift","addEventListener","cleanup","removeEventListener","shouldScroll","prevProps","currentHighlightedIndex","prevHighlightedIndex","componentDidUpdate","selectedItemChanged","componentWillUnmount","render","children","isDOMElement","cloneElement","getElementProps","Component","defaultProps","prevItem","stateChangeTypes","Downshift$1","dropdownDefaultStateValues","callOnChangeProps","action","newState","changes","handler","capitalizeString","invokeOnChangeHandler","updateA11yStatus","getA11yMessage","getElementIds","toggleButtonId","uniqueId","getItemIndex","isAcceptedCharacterKey","test","slice","toUpperCase","useLatestRef","val","useRef","useEnhancedReducer","reducer","initialState","isStateEqual","prevStateRef","actionRef","enhancedReducer","useCallback","_useReducer","useReducer","dispatch","propsRef","dispatchWithProps","useEffect","useControlledReducer","_useEnhancedReducer","getA11ySelectionMessage","selectionParameters","itemToStringLocal","circularNavigation","getDefaultValue","propKey","defaultStateValues","defaultPropKey","getInitialValue","initialPropKey","getInitialState","getHighlightedIndexOnOpen","offset","useMouseAndTouchTracker","downshiftElementRefs","handleBlur","mouseAndTouchTrackersRef","map","useGetterPropsCalledChecker","propKeys","acc","isDropdownsStateEqual","getItemIndexByCharacterKey","keysSoFar","itemToStringParam","lowerCasedItemStrings","toLowerCase","lowerCasedKeysSoFar","isValid","itemString","startsWith","commonDefaultProps","MenuKeyDownArrowDown","MenuKeyDownArrowUp","MenuKeyDownEscape","MenuKeyDownHome","MenuKeyDownEnd","MenuKeyDownEnter","MenuKeyDownSpaceButton","MenuKeyDownCharacter","MenuBlur","MenuMouseLeave","ItemMouseMove","ItemClick","ToggleButtonClick","ToggleButtonKeyDownArrowDown","ToggleButtonKeyDownArrowUp","ToggleButtonKeyDownCharacter","FunctionToggleMenu","FunctionOpenMenu","FunctionCloseMenu","FunctionSetHighlightedIndex","FunctionSelectItem","FunctionSetInputValue","FunctionReset","downshiftSelectReducer","lowercasedKey","useSelect","userProps","_useControlledReducer","toggleButtonRef","itemRefs","shouldScrollRef","shouldBlurRef","clearTimeoutRef","elementIdsRef","previousResultCountRef","isInitialMountRef","prevPropsRef","latest","outerDispatch","setGetterPropCallInfo","toggleButtonKeyDownHandlers","useMemo","menuKeyDownHandlers","newSelectedItem","setInputValue","newInputValue","labelProps","onMouseLeave","latestState","tabIndex","_ref3$refKey","_ref4$suppressRefErro","toggleProps","toggleButtonNode","_extends4","_latest$current","latestProps","itemProps","InputKeyDownArrowDown","InputKeyDownArrowUp","InputKeyDownEscape","InputKeyDownHome","InputKeyDownEnd","InputKeyDownEnter","InputChange","InputBlur","ControlledPropUpdatedSelectedItem","defaultPropsCommon","downshiftUseComboboxReducer","useCombobox","getInitialStateCommon","defaultInputValue","previousSelectedItemRef","inputRef","comboboxRef","getElementIdsCommon","_extends5","_ref6","_ref6$refKey","_ref7$suppressRefErro","inputNode","getComboboxProps","_temp8","_extends6","_ref8$refKey","_ref9$suppressRefErro","comboboxNode","activeIndex","selectedItems","getInitialValueCommon","getDefaultValueCommon","isKeyDownOperationPermitted","metaKey","ctrlKey","altKey","HTMLInputElement","selectionStart","selectionEnd","getA11yRemovalMessage","removedSelectedItem","keyNavigationNext","keyNavigationPrevious","SelectedItemClick","SelectedItemKeyDownDelete","SelectedItemKeyDownBackspace","SelectedItemKeyDownNavigationNext","SelectedItemKeyDownNavigationPrevious","DropdownKeyDownNavigationPrevious","DropdownKeyDownBackspace","DropdownClick","FunctionAddSelectedItem","FunctionRemoveSelectedItem","FunctionSetSelectedItems","FunctionSetActiveIndex","downshiftMultipleSelectionReducer","newActiveIndex","selectedItemIndex","useMultipleSelection","dropdownRef","previousSelectedItemsRef","selectedItemRefs","find","activeSelectedItem","selectedItemKeyDownHandlers","Delete","Backspace","dropdownKeyDownHandlers","getSelectedItemProps","selectedItemNode","getDropdownProps","_ref4$refKey","_ref4$preventKeyActio","preventKeyAction","_ref5$suppressRefErro","dropdownNode","addSelectedItem","removeSelectedItem","setSelectedItems","newSelectedItems","setActiveIndex"],"mappings":"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"}